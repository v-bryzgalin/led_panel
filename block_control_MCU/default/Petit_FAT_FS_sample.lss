
Petit_FAT_FS_sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001adc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001adc  00001b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010a  00800070  00800070  00001ba0  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00001ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000060  00000000  00000000  00001ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000148  00000000  00000000  00001c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015e2  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f9  00000000  00000000  0000332b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001167  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00004a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000459  00000000  00000000  00004c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aff  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ec ed       	ldi	r30, 0xDC	; 220
      3a:	fa e1       	ldi	r31, 0x1A	; 26
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a0 37       	cpi	r26, 0x70	; 112
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	a0 e7       	ldi	r26, 0x70	; 112
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	aa 37       	cpi	r26, 0x7A	; 122
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	1a d1       	rcall	.+564    	; 0x28e <main>
      5a:	3e cd       	rjmp	.-1412   	; 0xfffffad8 <__eeprom_end+0xff7efad7>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SPI_WriteByte>:
}
//------------------------------------------------------------------
//			Функция отправки байта из БУ в УСП по SPI (байт) 
//------------------------------------------------------------------
unsigned char SPI_WriteByte(unsigned char byte)
{
      5e:	91 e0       	ldi	r25, 0x01	; 1
      60:	05 c0       	rjmp	.+10     	; 0x6c <SPI_WriteByte+0xe>
      62:	9f 5f       	subi	r25, 0xFF	; 255
	unsigned char ntry = 0;
	while(1)
	{
		if(ntry >= 16)
      64:	91 31       	cpi	r25, 0x11	; 17
      66:	11 f4       	brne	.+4      	; 0x6c <SPI_WriteByte+0xe>
      68:	80 e0       	ldi	r24, 0x00	; 0
      6a:	08 95       	ret
		return 0;	
		if((SPSR & 0b10000000) == 0b00000000) // elsi SPI svoboden
      6c:	77 99       	sbic	0x0e, 7	; 14
      6e:	f9 cf       	rjmp	.-14     	; 0x62 <SPI_WriteByte+0x4>
			SPDR = byte;
      70:	8f b9       	out	0x0f, r24	; 15
		else
		{
			ntry++;
			continue;
		}
		if((SPSR & 0b01000000) == 0b00000000) // esli net konflikta zapisi
      72:	76 99       	sbic	0x0e, 6	; 14
      74:	f6 cf       	rjmp	.-20     	; 0x62 <SPI_WriteByte+0x4>
			while((SPSR & 0b10000000) == 0b10000000) // do konca peredachi
      76:	77 99       	sbic	0x0e, 7	; 14
      78:	fe cf       	rjmp	.-4      	; 0x76 <SPI_WriteByte+0x18>
      7a:	81 e0       	ldi	r24, 0x01	; 1
			continue;
		}
		break;
	}
	return 1;
}
      7c:	08 95       	ret

0000007e <delay_time>:
}
//------------------------------------------------------------------
//			Функция ожидания (временной интервал, режим работы)
//------------------------------------------------------------------
void delay_time(unsigned int interval, unsigned char rezhim) 
{
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	40 91 00 00 	lds	r20, 0x0000
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      8a:	c0 ef       	ldi	r28, 0xF0	; 240
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	20 e1       	ldi	r18, 0x10	; 16
      90:	37 e2       	ldi	r19, 0x27	; 39
      92:	fe 01       	movw	r30, r28
      94:	31 97       	sbiw	r30, 0x01	; 1
      96:	f1 f7       	brne	.-4      	; 0x94 <delay_time+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      98:	21 50       	subi	r18, 0x01	; 1
      9a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      9c:	d1 f7       	brne	.-12     	; 0x92 <delay_time+0x14>
	do
	{
		_delay_ms(1000);		// ожидание 1 секунду

		// считывание нового режима из блока ввода
		if (bit_is_set (PINC,Button_1)) // elsi nazhata 1 knopka 
      9e:	9b 99       	sbic	0x13, 3	; 19
      a0:	41 e0       	ldi	r20, 0x01	; 1
            rezhim_ee = 1; // vibran 1 rezhim
		if (bit_is_set (PINC,Button_2)) // elsi nazhata 2 knopka
      a2:	9c 99       	sbic	0x13, 4	; 19
      a4:	42 e0       	ldi	r20, 0x02	; 2
            rezhim_ee = 2; // vibran 2 rezhim
        if (bit_is_set (PINC,Button_3)) // elsi nazhata 3 knopka
      a6:	9d 99       	sbic	0x13, 5	; 19
      a8:	43 e0       	ldi	r20, 0x03	; 3
            rezhim_ee = 3; // vibran 3 rezhim
		if (bit_is_set (PINC,Button_4)) // elsi nazhata 4 knopka
      aa:	9e 99       	sbic	0x13, 6	; 19
      ac:	44 e0       	ldi	r20, 0x04	; 4
            rezhim_ee = 4; // vibran 4 rezhim

		if (rezhim != rezhim_ee) // если режим изменился
      ae:	64 17       	cp	r22, r20
      b0:	c1 f0       	breq	.+48     	; 0xe2 <delay_time+0x64>
      b2:	40 93 00 00 	sts	0x0000, r20
		{
			switch(eeprom_read_byte(&rezhim_ee)) // чтение режима из EEPROM 	
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	06 dd       	rcall	.-1524   	; 0xfffffac8 <__eeprom_end+0xff7efac7>
      bc:	82 30       	cpi	r24, 0x02	; 2
      be:	69 f0       	breq	.+26     	; 0xda <delay_time+0x5c>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	18 f4       	brcc	.+6      	; 0xca <delay_time+0x4c>
      c4:	81 30       	cpi	r24, 0x01	; 1
      c6:	a9 f4       	brne	.+42     	; 0xf2 <delay_time+0x74>
      c8:	05 c0       	rjmp	.+10     	; 0xd4 <delay_time+0x56>
      ca:	83 30       	cpi	r24, 0x03	; 3
      cc:	29 f0       	breq	.+10     	; 0xd8 <delay_time+0x5a>
      ce:	84 30       	cpi	r24, 0x04	; 4
      d0:	81 f4       	brne	.+32     	; 0xf2 <delay_time+0x74>
      d2:	05 c0       	rjmp	.+10     	; 0xde <delay_time+0x60>
				{
					case 1: PORTC |= _BV(Led_Red); 
      d4:	a8 9a       	sbi	0x15, 0	; 21
      d6:	0d c0       	rjmp	.+26     	; 0xf2 <delay_time+0x74>
							break; // Led Red (100)
					case 2: PORTC |= _BV(Led_Green); 
							break; // Led Green (001)
					case 3: PORTC |= _BV(Led_Red); 
      d8:	a8 9a       	sbi	0x15, 0	; 21
							PORTC |= _BV(Led_Green); 
      da:	a9 9a       	sbi	0x15, 1	; 21
      dc:	0a c0       	rjmp	.+20     	; 0xf2 <delay_time+0x74>
							break; // Led Yellow (101)
					case 4: PORTB |= _BV(Led_Blue); 
      de:	c2 9a       	sbi	0x18, 2	; 24
      e0:	08 c0       	rjmp	.+16     	; 0xf2 <delay_time+0x74>
				}
			counter = interval; // счетчик = интервал
		}
		else 					// если режим не изменился
		{
			counter ++;			// счетчик ++
      e2:	11 96       	adiw	r26, 0x01	; 1
		};
	} while (counter < interval); // цикл пока счетчик < интервала
      e4:	a8 17       	cp	r26, r24
      e6:	b9 07       	cpc	r27, r25
      e8:	10 f4       	brcc	.+4      	; 0xee <delay_time+0x70>
      ea:	46 2f       	mov	r20, r22
      ec:	d0 cf       	rjmp	.-96     	; 0x8e <delay_time+0x10>
      ee:	60 93 00 00 	sts	0x0000, r22
}
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <copy_file>:
}
//------------------------------------------------------------------
//			Функция копирования выбранного файла из MMC в УСП ()
//------------------------------------------------------------------
void copy_file() // podprogramma kopirovanija vibrannogo faila
{
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	df 93       	push	r29
     110:	cf 93       	push	r28
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	e2 97       	sbiw	r28, 0x32	; 50
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
	unsigned char read_buf[48]={}; // data 16 pixel
     122:	8e 01       	movw	r16, r28
     124:	0d 5f       	subi	r16, 0xFD	; 253
     126:	1f 4f       	sbci	r17, 0xFF	; 255
     128:	80 e3       	ldi	r24, 0x30	; 48
     12a:	f8 01       	movw	r30, r16
     12c:	11 92       	st	Z+, r1
     12e:	8a 95       	dec	r24
     130:	e9 f7       	brne	.-6      	; 0x12c <copy_file+0x34>
	unsigned char perek_addr_goriz = 0;
	unsigned char perek_addr_vert = 0; 
	unsigned char adres_panel = 0xCF; // adres paneli (bait)


	pf_lseek (54);					//smeshenie ukazatelya na 54 baita
     132:	66 e3       	ldi	r22, 0x36	; 54
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	39 d3       	rcall	.+1650   	; 0x7ae <pf_lseek>
     13c:	ee 24       	eor	r14, r14
     13e:	ff 24       	eor	r15, r15
	for (int i = 0; i < 256; i++)
	{
		//read 48 bytes to read_buf
		pf_read(read_buf, 48, &s1);
     140:	68 01       	movw	r12, r16
     142:	4e 01       	movw	r8, r28
     144:	08 94       	sec
     146:	81 1c       	adc	r8, r1
     148:	91 1c       	adc	r9, r1
			adres_panel -= 0x30;
			perek_addr_vert = 0;
		}
		
		// kopy data 16 pixel to panel
		SPCR = 0b11010000; //spi initialialization
     14a:	90 ed       	ldi	r25, 0xD0	; 208
     14c:	79 2e       	mov	r7, r25
		for (int i = 0; i < 48; i++)
     14e:	83 e3       	ldi	r24, 0x33	; 51
     150:	a8 2e       	mov	r10, r24
     152:	b1 2c       	mov	r11, r1
     154:	ac 0e       	add	r10, r28
     156:	bd 1e       	adc	r11, r29

	pf_lseek (54);					//smeshenie ukazatelya na 54 baita
	for (int i = 0; i < 256; i++)
	{
		//read 48 bytes to read_buf
		pf_read(read_buf, 48, &s1);
     158:	c6 01       	movw	r24, r12
     15a:	60 e3       	ldi	r22, 0x30	; 48
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	a4 01       	movw	r20, r8
     160:	f5 d6       	rcall	.+3562   	; 0xf4c <pf_read>

		// select panel
		PORTB |= _BV(Enable_Memory_card); // Bit Enable_Memory_card = 1
     162:	c2 9a       	sbi	0x18, 2	; 24
		PORTB |= ~_BV(Enable_Led_panel); // Bit Enable_Led_panel = 0
     164:	88 b3       	in	r24, 0x18	; 24
     166:	8d 6f       	ori	r24, 0xFD	; 253
     168:	88 bb       	out	0x18, r24	; 24
			adres_panel -= 0x30;
			perek_addr_vert = 0;
		}
		
		// kopy data 16 pixel to panel
		SPCR = 0b11010000; //spi initialialization
     16a:	7d b8       	out	0x0d, r7	; 13
     16c:	86 01       	movw	r16, r12
		for (int i = 0; i < 48; i++)
		{
			SPI_WriteByte(read_buf[i]);
     16e:	f8 01       	movw	r30, r16
     170:	81 91       	ld	r24, Z+
     172:	8f 01       	movw	r16, r30
     174:	74 df       	rcall	.-280    	; 0x5e <SPI_WriteByte>
			perek_addr_vert = 0;
		}
		
		// kopy data 16 pixel to panel
		SPCR = 0b11010000; //spi initialialization
		for (int i = 0; i < 48; i++)
     176:	0a 15       	cp	r16, r10
     178:	1b 05       	cpc	r17, r11
     17a:	c9 f7       	brne	.-14     	; 0x16e <copy_file+0x76>
		{
			SPI_WriteByte(read_buf[i]);
		}

		// select memory card
		PORTB |= ~_BV(Enable_Memory_card); // Bit Enable_Memory_card = 0
     17c:	88 b3       	in	r24, 0x18	; 24
     17e:	8b 6f       	ori	r24, 0xFB	; 251
     180:	88 bb       	out	0x18, r24	; 24
		PORTB |= _BV(Enable_Led_panel); // Bit Enable_Led_panel = 1
     182:	c1 9a       	sbi	0x18, 1	; 24
	unsigned char perek_addr_vert = 0; 
	unsigned char adres_panel = 0xCF; // adres paneli (bait)


	pf_lseek (54);					//smeshenie ukazatelya na 54 baita
	for (int i = 0; i < 256; i++)
     184:	08 94       	sec
     186:	e1 1c       	adc	r14, r1
     188:	f1 1c       	adc	r15, r1
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ef 16       	cp	r14, r31
     18e:	f1 e0       	ldi	r31, 0x01	; 1
     190:	ff 06       	cpc	r15, r31
     192:	11 f7       	brne	.-60     	; 0x158 <copy_file+0x60>

		// select memory card
		PORTB |= ~_BV(Enable_Memory_card); // Bit Enable_Memory_card = 0
		PORTB |= _BV(Enable_Led_panel); // Bit Enable_Led_panel = 1
	} 
}
     194:	e2 96       	adiw	r28, 0x32	; 50
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	cf 91       	pop	r28
     1a2:	df 91       	pop	r29
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	ff 90       	pop	r15
     1aa:	ef 90       	pop	r14
     1ac:	df 90       	pop	r13
     1ae:	cf 90       	pop	r12
     1b0:	bf 90       	pop	r11
     1b2:	af 90       	pop	r10
     1b4:	9f 90       	pop	r9
     1b6:	8f 90       	pop	r8
     1b8:	7f 90       	pop	r7
     1ba:	08 95       	ret

000001bc <scan_files>:
unsigned char num_file = 0; 	// номер выбранного файла
//------------------------------------------------------------------
//			Функция сканирования директории (путь к директории)
//------------------------------------------------------------------
FRESULT scan_files (char* path)			
{
     1bc:	6f 92       	push	r6
     1be:	7f 92       	push	r7
     1c0:	8f 92       	push	r8
     1c2:	9f 92       	push	r9
     1c4:	af 92       	push	r10
     1c6:	bf 92       	push	r11
     1c8:	cf 92       	push	r12
     1ca:	df 92       	push	r13
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	df 93       	push	r29
     1d6:	cf 93       	push	r28
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	a6 97       	sbiw	r28, 0x26	; 38
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	bc 01       	movw	r22, r24
	FRESULT res;
 	FILINFO fno;
	DIR dir;
	int i = 0; // index

    res = pf_opendir(&dir, path);		//open dir
     1ea:	7e 01       	movw	r14, r28
     1ec:	08 94       	sec
     1ee:	e1 1c       	adc	r14, r1
     1f0:	f1 1c       	adc	r15, r1
     1f2:	c7 01       	movw	r24, r14
     1f4:	f1 d5       	rcall	.+3042   	; 0xdd8 <pf_opendir>
     1f6:	98 2f       	mov	r25, r24
    if (res == FR_OK) 
     1f8:	88 23       	and	r24, r24
     1fa:	99 f5       	brne	.+102    	; 0x262 <scan_files+0xa6>
     1fc:	00 e0       	ldi	r16, 0x00	; 0
     1fe:	10 e0       	ldi	r17, 0x00	; 0
		{          
		   for (;;) 
		   {
         		res = pf_readdir(&dir, &fno);		//read dir
     200:	51 e1       	ldi	r21, 0x11	; 17
     202:	65 2e       	mov	r6, r21
     204:	71 2c       	mov	r7, r1
     206:	6c 0e       	add	r6, r28
     208:	7d 1e       	adc	r7, r29
     20a:	47 01       	movw	r8, r14
              	if (res != FR_OK || fno.fname[0] == 0) break;
              	if (fno.fattrib & ~AM_DIR) 
     20c:	4a e1       	ldi	r20, 0x1A	; 26
     20e:	a4 2e       	mov	r10, r20
     210:	b1 2c       	mov	r11, r1
     212:	ac 0e       	add	r10, r28
     214:	bd 1e       	adc	r11, r29
     216:	3d e0       	ldi	r19, 0x0D	; 13
     218:	c3 2e       	mov	r12, r19
     21a:	d1 2c       	mov	r13, r1
				{		//if object is a file
					for (int j = 0; j < 13; j++)
     21c:	27 e2       	ldi	r18, 0x27	; 39
     21e:	e2 2e       	mov	r14, r18
     220:	f1 2c       	mov	r15, r1
     222:	ec 0e       	add	r14, r28
     224:	fd 1e       	adc	r15, r29
    res = pf_opendir(&dir, path);		//open dir
    if (res == FR_OK) 
		{          
		   for (;;) 
		   {
         		res = pf_readdir(&dir, &fno);		//read dir
     226:	c4 01       	movw	r24, r8
     228:	b3 01       	movw	r22, r6
     22a:	f8 d3       	rcall	.+2032   	; 0xa1c <pf_readdir>
     22c:	98 2f       	mov	r25, r24
              	if (res != FR_OK || fno.fname[0] == 0) break;
     22e:	88 23       	and	r24, r24
     230:	c1 f4       	brne	.+48     	; 0x262 <scan_files+0xa6>
     232:	8a 8d       	ldd	r24, Y+26	; 0x1a
     234:	88 23       	and	r24, r24
     236:	a9 f0       	breq	.+42     	; 0x262 <scan_files+0xa6>
              	if (fno.fattrib & ~AM_DIR) 
     238:	89 8d       	ldd	r24, Y+25	; 0x19
     23a:	8f 7e       	andi	r24, 0xEF	; 239
     23c:	a1 f3       	breq	.-24     	; 0x226 <scan_files+0x6a>
     23e:	d5 01       	movw	r26, r10
     240:	0c 9d       	mul	r16, r12
     242:	f0 01       	movw	r30, r0
     244:	0d 9d       	mul	r16, r13
     246:	f0 0d       	add	r31, r0
     248:	1c 9d       	mul	r17, r12
     24a:	f0 0d       	add	r31, r0
     24c:	11 24       	eor	r1, r1
     24e:	ea 58       	subi	r30, 0x8A	; 138
     250:	ff 4f       	sbci	r31, 0xFF	; 255
				{		//if object is a file
					for (int j = 0; j < 13; j++)
					{
						fn[i].one_file[j] = fno.fname[j];	
     252:	8d 91       	ld	r24, X+
     254:	81 93       	st	Z+, r24
		   {
         		res = pf_readdir(&dir, &fno);		//read dir
              	if (res != FR_OK || fno.fname[0] == 0) break;
              	if (fno.fattrib & ~AM_DIR) 
				{		//if object is a file
					for (int j = 0; j < 13; j++)
     256:	ae 15       	cp	r26, r14
     258:	bf 05       	cpc	r27, r15
     25a:	d9 f7       	brne	.-10     	; 0x252 <scan_files+0x96>
					{
						fn[i].one_file[j] = fno.fname[j];	
					}
					i++;			                                 
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	e2 cf       	rjmp	.-60     	; 0x226 <scan_files+0x6a>
                }
       		}
		}
    return res;
}
     262:	89 2f       	mov	r24, r25
     264:	a6 96       	adiw	r28, 0x26	; 38
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	cf 91       	pop	r28
     272:	df 91       	pop	r29
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	df 90       	pop	r13
     27e:	cf 90       	pop	r12
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	9f 90       	pop	r9
     286:	8f 90       	pop	r8
     288:	7f 90       	pop	r7
     28a:	6f 90       	pop	r6
     28c:	08 95       	ret

0000028e <main>:
}
//------------------------------------------------------------------
//			Основная программа
//------------------------------------------------------------------
void main ()
{ 
     28e:	1f 93       	push	r17
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	ac 97       	sbiw	r28, 0x2c	; 44
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
	FATFS fs;				// FatFs object
 	FRESULT res;			// result
//------------------------------------------------------------------ 
 	DDRB = 0b10101111;		// настройка регистров направления портов B и С
     2a4:	8f ea       	ldi	r24, 0xAF	; 175
     2a6:	87 bb       	out	0x17, r24	; 23
 	DDRC = 0b00101010;		// 1 - выход, 0 - вход
     2a8:	8a e2       	ldi	r24, 0x2A	; 42
     2aa:	84 bb       	out	0x14, r24	; 20
 	PORTB |= ~_BV(Enable_Memory_card); // Bit Enable_Memory_card = 0
     2ac:	88 b3       	in	r24, 0x18	; 24
     2ae:	8b 6f       	ori	r24, 0xFB	; 251
     2b0:	88 bb       	out	0x18, r24	; 24
	PORTB |= _BV(Enable_Led_panel); // Bit Enable_Led_panel = 1
     2b2:	c1 9a       	sbi	0x18, 1	; 24
 
 	res=pf_mount(&fs);		// монтирование FAT
     2b4:	ce 01       	movw	r24, r28
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	d2 d8       	rcall	.-3676   	; 0xfffff45e <__eeprom_end+0xff7ef45d>
	if (res==0x00) 			// если FAT успешно смонтировалась
     2ba:	88 23       	and	r24, r24
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <main+0x32>
     2be:	55 c0       	rjmp	.+170    	; 0x36a <main+0xdc>
	{	
		scan_files ("images");		// scan files in directory "/images"
     2c0:	80 e6       	ldi	r24, 0x60	; 96
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	7b df       	rcall	.-266    	; 0x1bc <scan_files>
				PORTC |= _BV(Led_Green); // white color (111)
				PORTC |= _BV(Led_Blue);  
			}
		else						// если в папке есть файлы
			{
				switch(eeprom_read_byte(&rezhim_ee)) // считывание из EEPROM 	
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	fe db       	rcall	.-2052   	; 0xfffffac8 <__eeprom_end+0xff7efac7>
     2cc:	82 30       	cpi	r24, 0x02	; 2
     2ce:	69 f0       	breq	.+26     	; 0x2ea <main+0x5c>
     2d0:	83 30       	cpi	r24, 0x03	; 3
     2d2:	18 f4       	brcc	.+6      	; 0x2da <main+0x4c>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	61 f4       	brne	.+24     	; 0x2f0 <main+0x62>
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <main+0x56>
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	29 f0       	breq	.+10     	; 0x2e8 <main+0x5a>
     2de:	84 30       	cpi	r24, 0x04	; 4
     2e0:	39 f4       	brne	.+14     	; 0x2f0 <main+0x62>
     2e2:	05 c0       	rjmp	.+10     	; 0x2ee <main+0x60>
				{									// нового режима работы	
					case 1: PORTC |= _BV(Led_Red); 	// если нажата первая кнопка
     2e4:	a8 9a       	sbi	0x15, 0	; 21
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <main+0x62>
							break; 					// Led Red (100)

					case 2: PORTC |= _BV(Led_Green);// если нажата вторая кнопка 
							break; 					// Led Green (001)

					case 3: PORTC |= _BV(Led_Red);	// если нажата третья кнопка 
     2e8:	a8 9a       	sbi	0x15, 0	; 21
							PORTC |= _BV(Led_Green);// Led Yellow (101)
     2ea:	a9 9a       	sbi	0x15, 1	; 21
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <main+0x62>
							break; 

					case 4: PORTB |= _BV(Led_Blue);	// если нажата четвертая кнопка 
     2ee:	c2 9a       	sbi	0x18, 2	; 24
							break;					// Led Blue (010)
				} 

				res=pf_open(strcpy("/images/", fn[0].one_file)); 
     2f0:	87 e6       	ldi	r24, 0x67	; 103
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	66 e7       	ldi	r22, 0x76	; 118
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	e0 db       	rcall	.-2112   	; 0xfffffaba <__eeprom_end+0xff7efab9>
     2fa:	c2 d5       	rcall	.+2948   	; 0xe80 <pf_open>
								break;

						case 3: // vibran rezhim pereklyuchenija cherez 10 sec
								copy_file(); // kopirovanie vibrannogo faila
								delay_time(10, 1); // ozhidanie 10 sec
								res=pf_open(strcpy("/images/", fn[num_file].one_file)); 
     2fc:	1d e0       	ldi	r17, 0x0D	; 13
				res=pf_open(strcpy("/images/", fn[0].one_file)); 
				//открытие первого файла

  				do 
				{
					switch(eeprom_read_byte(&rezhim_ee)) // выбор режима работы	
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	e2 db       	rcall	.-2108   	; 0xfffffac8 <__eeprom_end+0xff7efac7>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	81 f0       	breq	.+32     	; 0x328 <main+0x9a>
     308:	83 30       	cpi	r24, 0x03	; 3
     30a:	18 f4       	brcc	.+6      	; 0x312 <main+0x84>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	d1 f7       	brne	.-12     	; 0x304 <main+0x76>
     310:	05 c0       	rjmp	.+10     	; 0x31c <main+0x8e>
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	69 f0       	breq	.+26     	; 0x330 <main+0xa2>
     316:	84 30       	cpi	r24, 0x04	; 4
     318:	a9 f7       	brne	.-22     	; 0x304 <main+0x76>
     31a:	0e c0       	rjmp	.+28     	; 0x338 <main+0xaa>
					{
						case 1: // vibran rezhim staticheskoj kartinki
								copy_file(); // kopirovanie vibrannogo faila
     31c:	ed de       	rcall	.-550    	; 0xf8 <copy_file>
								delay_time(3600, 1); // ozhidanie 3600 sec 
     31e:	80 e1       	ldi	r24, 0x10	; 16
     320:	9e e0       	ldi	r25, 0x0E	; 14
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	ac de       	rcall	.-680    	; 0x7e <delay_time>
     326:	eb cf       	rjmp	.-42     	; 0x2fe <main+0x70>
								break;

						case 2: // vibran rezhim pereklyuchenija cherez 5 sec
								copy_file(); // kopirovanie vibrannogo faila
     328:	e7 de       	rcall	.-562    	; 0xf8 <copy_file>
								delay_time(5, 1); // ozhidanie 5 sec	
     32a:	85 e0       	ldi	r24, 0x05	; 5
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	07 c0       	rjmp	.+14     	; 0x33e <main+0xb0>
									//open first file
								}
								break;

						case 3: // vibran rezhim pereklyuchenija cherez 10 sec
								copy_file(); // kopirovanie vibrannogo faila
     330:	e3 de       	rcall	.-570    	; 0xf8 <copy_file>
								delay_time(10, 1); // ozhidanie 10 sec
     332:	8a e0       	ldi	r24, 0x0A	; 10
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	03 c0       	rjmp	.+6      	; 0x33e <main+0xb0>
									//open first file
								}
								break;

						case 4: // vibran rezhim pereklyuchenija cherez 20 sec
								copy_file(); // kopirovanie vibrannogo faila
     338:	df de       	rcall	.-578    	; 0xf8 <copy_file>
								delay_time(20, 1); // ozhidanie 20 sec
     33a:	84 e1       	ldi	r24, 0x14	; 20
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	9e de       	rcall	.-708    	; 0x7e <delay_time>
								res=pf_open(strcpy("/images/", fn[num_file].one_file)); 
     342:	60 91 70 00 	lds	r22, 0x0070
     346:	61 9f       	mul	r22, r17
     348:	b0 01       	movw	r22, r0
     34a:	11 24       	eor	r1, r1
     34c:	6a 58       	subi	r22, 0x8A	; 138
     34e:	7f 4f       	sbci	r23, 0xFF	; 255
     350:	87 e6       	ldi	r24, 0x67	; 103
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	b2 db       	rcall	.-2204   	; 0xfffffaba <__eeprom_end+0xff7efab9>
     356:	94 d5       	rcall	.+2856   	; 0xe80 <pf_open>

								if (res = FR_OK) // esli eshe est' faili
									num_file ++; // vibiraetsya sled fail
								else
								{
									num_file = 0; // vibiraetsya pervij fail
     358:	10 92 70 00 	sts	0x0070, r1
									res=pf_open(strcpy("/images/", fn[0].one_file));
     35c:	87 e6       	ldi	r24, 0x67	; 103
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	66 e7       	ldi	r22, 0x76	; 118
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	aa db       	rcall	.-2220   	; 0xfffffaba <__eeprom_end+0xff7efab9>
     366:	8c d5       	rcall	.+2840   	; 0xe80 <pf_open>
     368:	ca cf       	rjmp	.-108    	; 0x2fe <main+0x70>
				
				} while (1); // бесконечный цикл
			}
	} 
	
} 
     36a:	ac 96       	adiw	r28, 0x2c	; 44
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	1f 91       	pop	r17
     37c:	08 95       	ret

0000037e <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     390:	c0 91 71 00 	lds	r28, 0x0071
     394:	d0 91 72 00 	lds	r29, 0x0072


	dj->index = 0;
     398:	fc 01       	movw	r30, r24
     39a:	11 82       	std	Z+1, r1	; 0x01
     39c:	10 82       	st	Z, r1
	clst = dj->sclust;
     39e:	24 81       	ldd	r18, Z+4	; 0x04
     3a0:	35 81       	ldd	r19, Z+5	; 0x05
     3a2:	46 81       	ldd	r20, Z+6	; 0x06
     3a4:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     3a6:	21 30       	cpi	r18, 0x01	; 1
     3a8:	31 05       	cpc	r19, r1
     3aa:	41 05       	cpc	r20, r1
     3ac:	51 05       	cpc	r21, r1
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <dir_rewind+0x34>
     3b0:	5a c0       	rjmp	.+180    	; 0x466 <__stack+0x7>
     3b2:	88 85       	ldd	r24, Y+8	; 0x08
     3b4:	99 85       	ldd	r25, Y+9	; 0x09
     3b6:	aa 85       	ldd	r26, Y+10	; 0x0a
     3b8:	bb 85       	ldd	r27, Y+11	; 0x0b
     3ba:	28 17       	cp	r18, r24
     3bc:	39 07       	cpc	r19, r25
     3be:	4a 07       	cpc	r20, r26
     3c0:	5b 07       	cpc	r21, r27
     3c2:	08 f0       	brcs	.+2      	; 0x3c6 <dir_rewind+0x48>
     3c4:	50 c0       	rjmp	.+160    	; 0x466 <__stack+0x7>
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     3c6:	21 15       	cp	r18, r1
     3c8:	31 05       	cpc	r19, r1
     3ca:	41 05       	cpc	r20, r1
     3cc:	51 05       	cpc	r21, r1
     3ce:	39 f4       	brne	.+14     	; 0x3de <dir_rewind+0x60>
     3d0:	88 81       	ld	r24, Y
     3d2:	83 30       	cpi	r24, 0x03	; 3
     3d4:	21 f4       	brne	.+8      	; 0x3de <dir_rewind+0x60>
		clst = fs->dirbase;
     3d6:	28 89       	ldd	r18, Y+16	; 0x10
     3d8:	39 89       	ldd	r19, Y+17	; 0x11
     3da:	4a 89       	ldd	r20, Y+18	; 0x12
     3dc:	5b 89       	ldd	r21, Y+19	; 0x13
#endif
	dj->clust = clst;						/* Current cluster */
     3de:	f6 01       	movw	r30, r12
     3e0:	20 87       	std	Z+8, r18	; 0x08
     3e2:	31 87       	std	Z+9, r19	; 0x09
     3e4:	42 87       	std	Z+10, r20	; 0x0a
     3e6:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3e8:	21 15       	cp	r18, r1
     3ea:	31 05       	cpc	r19, r1
     3ec:	41 05       	cpc	r20, r1
     3ee:	51 05       	cpc	r21, r1
     3f0:	79 f1       	breq	.+94     	; 0x450 <dir_rewind+0xd2>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     3f2:	8e ef       	ldi	r24, 0xFE	; 254
     3f4:	e8 2e       	mov	r14, r24
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	f8 2e       	mov	r15, r24
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	08 2f       	mov	r16, r24
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	18 2f       	mov	r17, r24
     402:	e2 0e       	add	r14, r18
     404:	f3 1e       	adc	r15, r19
     406:	04 1f       	adc	r16, r20
     408:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     40a:	88 85       	ldd	r24, Y+8	; 0x08
     40c:	99 85       	ldd	r25, Y+9	; 0x09
     40e:	aa 85       	ldd	r26, Y+10	; 0x0a
     410:	bb 85       	ldd	r27, Y+11	; 0x0b
     412:	02 97       	sbiw	r24, 0x02	; 2
     414:	a1 09       	sbc	r26, r1
     416:	b1 09       	sbc	r27, r1
     418:	e8 16       	cp	r14, r24
     41a:	f9 06       	cpc	r15, r25
     41c:	0a 07       	cpc	r16, r26
     41e:	1b 07       	cpc	r17, r27
     420:	28 f0       	brcs	.+10     	; 0x42c <dir_rewind+0xae>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	16 c0       	rjmp	.+44     	; 0x458 <dir_rewind+0xda>
	return (DWORD)clst * fs->csize + fs->database;
     42c:	29 81       	ldd	r18, Y+1	; 0x01
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	c8 01       	movw	r24, r16
     436:	b7 01       	movw	r22, r14
     438:	ff da       	rcall	.-2562   	; 0xfffffa38 <__eeprom_end+0xff7efa37>
     43a:	9b 01       	movw	r18, r22
     43c:	ac 01       	movw	r20, r24
     43e:	8c 89       	ldd	r24, Y+20	; 0x14
     440:	9d 89       	ldd	r25, Y+21	; 0x15
     442:	ae 89       	ldd	r26, Y+22	; 0x16
     444:	bf 89       	ldd	r27, Y+23	; 0x17
     446:	28 0f       	add	r18, r24
     448:	39 1f       	adc	r19, r25
     44a:	4a 1f       	adc	r20, r26
     44c:	5b 1f       	adc	r21, r27
     44e:	04 c0       	rjmp	.+8      	; 0x458 <dir_rewind+0xda>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     450:	28 89       	ldd	r18, Y+16	; 0x10
     452:	39 89       	ldd	r19, Y+17	; 0x11
     454:	4a 89       	ldd	r20, Y+18	; 0x12
     456:	5b 89       	ldd	r21, Y+19	; 0x13
     458:	f6 01       	movw	r30, r12
     45a:	24 87       	std	Z+12, r18	; 0x0c
     45c:	35 87       	std	Z+13, r19	; 0x0d
     45e:	46 87       	std	Z+14, r20	; 0x0e
     460:	57 87       	std	Z+15, r21	; 0x0f
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	01 c0       	rjmp	.+2      	; 0x468 <__stack+0x9>

	return FR_OK;	/* Seek succeeded */
     466:	81 e0       	ldi	r24, 0x01	; 1
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	08 95       	ret

0000047a <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     47a:	6f 92       	push	r6
     47c:	7f 92       	push	r7
     47e:	8f 92       	push	r8
     480:	9f 92       	push	r9
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	00 d0       	rcall	.+0      	; 0x498 <get_fat+0x1e>
     498:	00 d0       	rcall	.+0      	; 0x49a <get_fat+0x20>
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	4b 01       	movw	r8, r22
     4a0:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     4a2:	60 90 71 00 	lds	r6, 0x0071
     4a6:	70 90 72 00 	lds	r7, 0x0072


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	88 16       	cp	r8, r24
     4ae:	91 04       	cpc	r9, r1
     4b0:	a1 04       	cpc	r10, r1
     4b2:	b1 04       	cpc	r11, r1
     4b4:	08 f4       	brcc	.+2      	; 0x4b8 <get_fat+0x3e>
     4b6:	b0 c0       	rjmp	.+352    	; 0x618 <get_fat+0x19e>
     4b8:	f3 01       	movw	r30, r6
     4ba:	80 85       	ldd	r24, Z+8	; 0x08
     4bc:	91 85       	ldd	r25, Z+9	; 0x09
     4be:	a2 85       	ldd	r26, Z+10	; 0x0a
     4c0:	b3 85       	ldd	r27, Z+11	; 0x0b
     4c2:	88 16       	cp	r8, r24
     4c4:	99 06       	cpc	r9, r25
     4c6:	aa 06       	cpc	r10, r26
     4c8:	bb 06       	cpc	r11, r27
     4ca:	08 f0       	brcs	.+2      	; 0x4ce <get_fat+0x54>
     4cc:	a5 c0       	rjmp	.+330    	; 0x618 <get_fat+0x19e>
		return 1;

	switch (fs->fs_type) {
     4ce:	80 81       	ld	r24, Z
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <get_fat+0x5c>
     4d4:	5d c0       	rjmp	.+186    	; 0x590 <get_fat+0x116>
     4d6:	83 30       	cpi	r24, 0x03	; 3
     4d8:	09 f4       	brne	.+2      	; 0x4dc <get_fat+0x62>
     4da:	78 c0       	rjmp	.+240    	; 0x5cc <get_fat+0x152>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	09 f0       	breq	.+2      	; 0x4e2 <get_fat+0x68>
     4e0:	9b c0       	rjmp	.+310    	; 0x618 <get_fat+0x19e>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     4e2:	c4 01       	movw	r24, r8
     4e4:	96 95       	lsr	r25
     4e6:	87 95       	ror	r24
     4e8:	88 0d       	add	r24, r8
     4ea:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     4ec:	9c 01       	movw	r18, r24
     4ee:	31 70       	andi	r19, 0x01	; 1
     4f0:	89 2f       	mov	r24, r25
     4f2:	99 27       	eor	r25, r25
     4f4:	86 95       	lsr	r24
     4f6:	6c 01       	movw	r12, r24
     4f8:	ee 24       	eor	r14, r14
     4fa:	ff 24       	eor	r15, r15
     4fc:	f3 01       	movw	r30, r6
     4fe:	44 85       	ldd	r20, Z+12	; 0x0c
     500:	55 85       	ldd	r21, Z+13	; 0x0d
     502:	66 85       	ldd	r22, Z+14	; 0x0e
     504:	77 85       	ldd	r23, Z+15	; 0x0f
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	2f 3f       	cpi	r18, 0xFF	; 255
     50e:	3f 07       	cpc	r19, r31
     510:	49 f0       	breq	.+18     	; 0x524 <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     512:	c4 0e       	add	r12, r20
     514:	d5 1e       	adc	r13, r21
     516:	e6 1e       	adc	r14, r22
     518:	f7 1e       	adc	r15, r23
     51a:	b7 01       	movw	r22, r14
     51c:	a6 01       	movw	r20, r12
     51e:	02 e0       	ldi	r16, 0x02	; 2
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	1d c0       	rjmp	.+58     	; 0x55e <get_fat+0xe4>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     524:	4c 0d       	add	r20, r12
     526:	5d 1d       	adc	r21, r13
     528:	6e 1d       	adc	r22, r14
     52a:	7f 1d       	adc	r23, r15
     52c:	2f ef       	ldi	r18, 0xFF	; 255
     52e:	31 e0       	ldi	r19, 0x01	; 1
     530:	01 e0       	ldi	r16, 0x01	; 1
     532:	10 e0       	ldi	r17, 0x00	; 0
     534:	10 d9       	rcall	.-3552   	; 0xfffff756 <__eeprom_end+0xff7ef755>
     536:	88 23       	and	r24, r24
     538:	09 f0       	breq	.+2      	; 0x53c <get_fat+0xc2>
     53a:	6e c0       	rjmp	.+220    	; 0x618 <get_fat+0x19e>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     53c:	f3 01       	movw	r30, r6
     53e:	44 85       	ldd	r20, Z+12	; 0x0c
     540:	55 85       	ldd	r21, Z+13	; 0x0d
     542:	66 85       	ldd	r22, Z+14	; 0x0e
     544:	77 85       	ldd	r23, Z+15	; 0x0f
     546:	4f 5f       	subi	r20, 0xFF	; 255
     548:	5f 4f       	sbci	r21, 0xFF	; 255
     54a:	6f 4f       	sbci	r22, 0xFF	; 255
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	4c 0d       	add	r20, r12
     550:	5d 1d       	adc	r21, r13
     552:	6e 1d       	adc	r22, r14
     554:	7f 1d       	adc	r23, r15
     556:	ce 01       	movw	r24, r28
     558:	02 96       	adiw	r24, 0x02	; 2
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	fb d8       	rcall	.-3594   	; 0xfffff756 <__eeprom_end+0xff7ef755>
     560:	88 23       	and	r24, r24
     562:	09 f0       	breq	.+2      	; 0x566 <get_fat+0xec>
     564:	59 c0       	rjmp	.+178    	; 0x618 <get_fat+0x19e>
		}
		wc = LD_WORD(buf);
     566:	69 81       	ldd	r22, Y+1	; 0x01
     568:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     56a:	c4 01       	movw	r24, r8
     56c:	81 70       	andi	r24, 0x01	; 1
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	89 2b       	or	r24, r25
     572:	39 f0       	breq	.+14     	; 0x582 <get_fat+0x108>
     574:	a4 e0       	ldi	r26, 0x04	; 4
     576:	76 95       	lsr	r23
     578:	67 95       	ror	r22
     57a:	aa 95       	dec	r26
     57c:	e1 f7       	brne	.-8      	; 0x576 <get_fat+0xfc>
     57e:	9b 01       	movw	r18, r22
     580:	22 c0       	rjmp	.+68     	; 0x5c6 <get_fat+0x14c>
     582:	9b 01       	movw	r18, r22
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	3f 70       	andi	r19, 0x0F	; 15
     58a:	40 70       	andi	r20, 0x00	; 0
     58c:	50 70       	andi	r21, 0x00	; 0
     58e:	48 c0       	rjmp	.+144    	; 0x620 <get_fat+0x1a6>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     590:	77 27       	eor	r23, r23
     592:	6b 2d       	mov	r22, r11
     594:	5a 2d       	mov	r21, r10
     596:	49 2d       	mov	r20, r9
     598:	f3 01       	movw	r30, r6
     59a:	84 85       	ldd	r24, Z+12	; 0x0c
     59c:	95 85       	ldd	r25, Z+13	; 0x0d
     59e:	a6 85       	ldd	r26, Z+14	; 0x0e
     5a0:	b7 85       	ldd	r27, Z+15	; 0x0f
     5a2:	48 0f       	add	r20, r24
     5a4:	59 1f       	adc	r21, r25
     5a6:	6a 1f       	adc	r22, r26
     5a8:	7b 1f       	adc	r23, r27
     5aa:	94 01       	movw	r18, r8
     5ac:	30 70       	andi	r19, 0x00	; 0
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	02 e0       	ldi	r16, 0x02	; 2
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	cd d8       	rcall	.-3686   	; 0xfffff756 <__eeprom_end+0xff7ef755>
     5bc:	88 23       	and	r24, r24
     5be:	61 f5       	brne	.+88     	; 0x618 <get_fat+0x19e>
		return LD_WORD(buf);
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	9c 01       	movw	r18, r24
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	2a c0       	rjmp	.+84     	; 0x620 <get_fat+0x1a6>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     5cc:	b5 01       	movw	r22, r10
     5ce:	a4 01       	movw	r20, r8
     5d0:	27 e0       	ldi	r18, 0x07	; 7
     5d2:	76 95       	lsr	r23
     5d4:	67 95       	ror	r22
     5d6:	57 95       	ror	r21
     5d8:	47 95       	ror	r20
     5da:	2a 95       	dec	r18
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <get_fat+0x158>
     5de:	f3 01       	movw	r30, r6
     5e0:	84 85       	ldd	r24, Z+12	; 0x0c
     5e2:	95 85       	ldd	r25, Z+13	; 0x0d
     5e4:	a6 85       	ldd	r26, Z+14	; 0x0e
     5e6:	b7 85       	ldd	r27, Z+15	; 0x0f
     5e8:	48 0f       	add	r20, r24
     5ea:	59 1f       	adc	r21, r25
     5ec:	6a 1f       	adc	r22, r26
     5ee:	7b 1f       	adc	r23, r27
     5f0:	94 01       	movw	r18, r8
     5f2:	2f 77       	andi	r18, 0x7F	; 127
     5f4:	30 70       	andi	r19, 0x00	; 0
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	04 e0       	ldi	r16, 0x04	; 4
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	a7 d8       	rcall	.-3762   	; 0xfffff756 <__eeprom_end+0xff7ef755>
     608:	88 23       	and	r24, r24
     60a:	31 f4       	brne	.+12     	; 0x618 <get_fat+0x19e>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     60c:	29 81       	ldd	r18, Y+1	; 0x01
     60e:	3a 81       	ldd	r19, Y+2	; 0x02
     610:	4b 81       	ldd	r20, Y+3	; 0x03
     612:	5c 81       	ldd	r21, Y+4	; 0x04
     614:	5f 70       	andi	r21, 0x0F	; 15
     616:	04 c0       	rjmp	.+8      	; 0x620 <get_fat+0x1a6>
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     620:	b9 01       	movw	r22, r18
     622:	ca 01       	movw	r24, r20
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	cf 91       	pop	r28
     62e:	df 91       	pop	r29
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	9f 90       	pop	r9
     642:	8f 90       	pop	r8
     644:	7f 90       	pop	r7
     646:	6f 90       	pop	r6
     648:	08 95       	ret

0000064a <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     660:	c0 91 71 00 	lds	r28, 0x0071
     664:	d0 91 72 00 	lds	r29, 0x0072


	i = dj->index + 1;
     668:	fc 01       	movw	r30, r24
     66a:	c0 80       	ld	r12, Z
     66c:	d1 80       	ldd	r13, Z+1	; 0x01
     66e:	08 94       	sec
     670:	c1 1c       	adc	r12, r1
     672:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     674:	c1 14       	cp	r12, r1
     676:	d1 04       	cpc	r13, r1
     678:	09 f4       	brne	.+2      	; 0x67c <dir_next+0x32>
     67a:	8d c0       	rjmp	.+282    	; 0x796 <dir_next+0x14c>
     67c:	24 85       	ldd	r18, Z+12	; 0x0c
     67e:	35 85       	ldd	r19, Z+13	; 0x0d
     680:	46 85       	ldd	r20, Z+14	; 0x0e
     682:	57 85       	ldd	r21, Z+15	; 0x0f
     684:	21 15       	cp	r18, r1
     686:	31 05       	cpc	r19, r1
     688:	41 05       	cpc	r20, r1
     68a:	51 05       	cpc	r21, r1
     68c:	09 f4       	brne	.+2      	; 0x690 <dir_next+0x46>
     68e:	83 c0       	rjmp	.+262    	; 0x796 <dir_next+0x14c>
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     690:	c6 01       	movw	r24, r12
     692:	8f 70       	andi	r24, 0x0F	; 15
     694:	90 70       	andi	r25, 0x00	; 0
     696:	89 2b       	or	r24, r25
     698:	09 f0       	breq	.+2      	; 0x69c <dir_next+0x52>
     69a:	78 c0       	rjmp	.+240    	; 0x78c <dir_next+0x142>
		dj->sect++;			/* Next sector */
     69c:	2f 5f       	subi	r18, 0xFF	; 255
     69e:	3f 4f       	sbci	r19, 0xFF	; 255
     6a0:	4f 4f       	sbci	r20, 0xFF	; 255
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
     6a4:	24 87       	std	Z+12, r18	; 0x0c
     6a6:	35 87       	std	Z+13, r19	; 0x0d
     6a8:	46 87       	std	Z+14, r20	; 0x0e
     6aa:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     6ac:	40 85       	ldd	r20, Z+8	; 0x08
     6ae:	51 85       	ldd	r21, Z+9	; 0x09
     6b0:	62 85       	ldd	r22, Z+10	; 0x0a
     6b2:	73 85       	ldd	r23, Z+11	; 0x0b
     6b4:	41 15       	cp	r20, r1
     6b6:	51 05       	cpc	r21, r1
     6b8:	61 05       	cpc	r22, r1
     6ba:	71 05       	cpc	r23, r1
     6bc:	39 f4       	brne	.+14     	; 0x6cc <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     6be:	8c 81       	ldd	r24, Y+4	; 0x04
     6c0:	9d 81       	ldd	r25, Y+5	; 0x05
     6c2:	c8 16       	cp	r12, r24
     6c4:	d9 06       	cpc	r13, r25
     6c6:	08 f4       	brcc	.+2      	; 0x6ca <dir_next+0x80>
     6c8:	61 c0       	rjmp	.+194    	; 0x78c <dir_next+0x142>
     6ca:	65 c0       	rjmp	.+202    	; 0x796 <dir_next+0x14c>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	96 01       	movw	r18, r12
     6d4:	e4 e0       	ldi	r30, 0x04	; 4
     6d6:	36 95       	lsr	r19
     6d8:	27 95       	ror	r18
     6da:	ea 95       	dec	r30
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <dir_next+0x8c>
     6de:	82 23       	and	r24, r18
     6e0:	93 23       	and	r25, r19
     6e2:	89 2b       	or	r24, r25
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <dir_next+0x9e>
     6e6:	52 c0       	rjmp	.+164    	; 0x78c <dir_next+0x142>
				clst = get_fat(dj->clust);		/* Get next cluster */
     6e8:	cb 01       	movw	r24, r22
     6ea:	ba 01       	movw	r22, r20
     6ec:	c6 de       	rcall	.-628    	; 0x47a <get_fat>
     6ee:	9b 01       	movw	r18, r22
     6f0:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     6f2:	62 30       	cpi	r22, 0x02	; 2
     6f4:	71 05       	cpc	r23, r1
     6f6:	81 05       	cpc	r24, r1
     6f8:	91 05       	cpc	r25, r1
     6fa:	10 f4       	brcc	.+4      	; 0x700 <dir_next+0xb6>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	4c c0       	rjmp	.+152    	; 0x798 <dir_next+0x14e>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     700:	88 85       	ldd	r24, Y+8	; 0x08
     702:	99 85       	ldd	r25, Y+9	; 0x09
     704:	aa 85       	ldd	r26, Y+10	; 0x0a
     706:	bb 85       	ldd	r27, Y+11	; 0x0b
     708:	28 17       	cp	r18, r24
     70a:	39 07       	cpc	r19, r25
     70c:	4a 07       	cpc	r20, r26
     70e:	5b 07       	cpc	r21, r27
     710:	08 f0       	brcs	.+2      	; 0x714 <dir_next+0xca>
     712:	41 c0       	rjmp	.+130    	; 0x796 <dir_next+0x14c>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     714:	f5 01       	movw	r30, r10
     716:	20 87       	std	Z+8, r18	; 0x08
     718:	31 87       	std	Z+9, r19	; 0x09
     71a:	42 87       	std	Z+10, r20	; 0x0a
     71c:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     71e:	c0 91 71 00 	lds	r28, 0x0071
     722:	d0 91 72 00 	lds	r29, 0x0072


	clst -= 2;
     726:	8e ef       	ldi	r24, 0xFE	; 254
     728:	e8 2e       	mov	r14, r24
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	f8 2e       	mov	r15, r24
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	08 2f       	mov	r16, r24
     732:	8f ef       	ldi	r24, 0xFF	; 255
     734:	18 2f       	mov	r17, r24
     736:	e2 0e       	add	r14, r18
     738:	f3 1e       	adc	r15, r19
     73a:	04 1f       	adc	r16, r20
     73c:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     73e:	88 85       	ldd	r24, Y+8	; 0x08
     740:	99 85       	ldd	r25, Y+9	; 0x09
     742:	aa 85       	ldd	r26, Y+10	; 0x0a
     744:	bb 85       	ldd	r27, Y+11	; 0x0b
     746:	02 97       	sbiw	r24, 0x02	; 2
     748:	a1 09       	sbc	r26, r1
     74a:	b1 09       	sbc	r27, r1
     74c:	e8 16       	cp	r14, r24
     74e:	f9 06       	cpc	r15, r25
     750:	0a 07       	cpc	r16, r26
     752:	1b 07       	cpc	r17, r27
     754:	28 f0       	brcs	.+10     	; 0x760 <dir_next+0x116>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	11 c0       	rjmp	.+34     	; 0x782 <dir_next+0x138>
	return (DWORD)clst * fs->csize + fs->database;
     760:	29 81       	ldd	r18, Y+1	; 0x01
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	c8 01       	movw	r24, r16
     76a:	b7 01       	movw	r22, r14
     76c:	65 d9       	rcall	.-3382   	; 0xfffffa38 <__eeprom_end+0xff7efa37>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	8c 89       	ldd	r24, Y+20	; 0x14
     774:	9d 89       	ldd	r25, Y+21	; 0x15
     776:	ae 89       	ldd	r26, Y+22	; 0x16
     778:	bf 89       	ldd	r27, Y+23	; 0x17
     77a:	28 0f       	add	r18, r24
     77c:	39 1f       	adc	r19, r25
     77e:	4a 1f       	adc	r20, r26
     780:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     782:	f5 01       	movw	r30, r10
     784:	24 87       	std	Z+12, r18	; 0x0c
     786:	35 87       	std	Z+13, r19	; 0x0d
     788:	46 87       	std	Z+14, r20	; 0x0e
     78a:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     78c:	f5 01       	movw	r30, r10
     78e:	d1 82       	std	Z+1, r13	; 0x01
     790:	c0 82       	st	Z, r12
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	01 c0       	rjmp	.+2      	; 0x798 <dir_next+0x14e>

	return FR_OK;
     796:	83 e0       	ldi	r24, 0x03	; 3
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	08 95       	ret

000007ae <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     7ae:	2f 92       	push	r2
     7b0:	3f 92       	push	r3
     7b2:	4f 92       	push	r4
     7b4:	5f 92       	push	r5
     7b6:	6f 92       	push	r6
     7b8:	7f 92       	push	r7
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     7d4:	c0 91 71 00 	lds	r28, 0x0071
     7d8:	d0 91 72 00 	lds	r29, 0x0072


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     7dc:	20 97       	sbiw	r28, 0x00	; 0
     7de:	11 f4       	brne	.+4      	; 0x7e4 <pf_lseek+0x36>
     7e0:	86 e0       	ldi	r24, 0x06	; 6
     7e2:	09 c1       	rjmp	.+530    	; 0x9f6 <pf_lseek+0x248>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	80 fd       	sbrc	r24, 0
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <pf_lseek+0x40>
     7ea:	85 e0       	ldi	r24, 0x05	; 5
     7ec:	04 c1       	rjmp	.+520    	; 0x9f6 <pf_lseek+0x248>
     7ee:	ac 8c       	ldd	r10, Y+28	; 0x1c
     7f0:	bd 8c       	ldd	r11, Y+29	; 0x1d
     7f2:	ce 8c       	ldd	r12, Y+30	; 0x1e
     7f4:	df 8c       	ldd	r13, Y+31	; 0x1f
     7f6:	4e 2f       	mov	r20, r30
     7f8:	59 2f       	mov	r21, r25
     7fa:	cb 01       	movw	r24, r22
     7fc:	da 01       	movw	r26, r20
     7fe:	3c 01       	movw	r6, r24
     800:	4d 01       	movw	r8, r26
     802:	a6 14       	cp	r10, r6
     804:	b7 04       	cpc	r11, r7
     806:	c8 04       	cpc	r12, r8
     808:	d9 04       	cpc	r13, r9
     80a:	10 f4       	brcc	.+4      	; 0x810 <pf_lseek+0x62>
     80c:	35 01       	movw	r6, r10
     80e:	46 01       	movw	r8, r12
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     810:	28 8d       	ldd	r18, Y+24	; 0x18
     812:	39 8d       	ldd	r19, Y+25	; 0x19
     814:	4a 8d       	ldd	r20, Y+26	; 0x1a
     816:	5b 8d       	ldd	r21, Y+27	; 0x1b
	fs->fptr = 0;
     818:	18 8e       	std	Y+24, r1	; 0x18
     81a:	19 8e       	std	Y+25, r1	; 0x19
     81c:	1a 8e       	std	Y+26, r1	; 0x1a
     81e:	1b 8e       	std	Y+27, r1	; 0x1b
	if (ofs > 0) {
     820:	61 14       	cp	r6, r1
     822:	71 04       	cpc	r7, r1
     824:	81 04       	cpc	r8, r1
     826:	91 04       	cpc	r9, r1
     828:	09 f4       	brne	.+2      	; 0x82c <pf_lseek+0x7e>
     82a:	e4 c0       	rjmp	.+456    	; 0x9f4 <pf_lseek+0x246>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	a8 2e       	mov	r10, r24
     830:	bb 24       	eor	r11, r11
     832:	cc 24       	eor	r12, r12
     834:	dd 24       	eor	r13, r13
     836:	99 e0       	ldi	r25, 0x09	; 9
     838:	aa 0c       	add	r10, r10
     83a:	bb 1c       	adc	r11, r11
     83c:	cc 1c       	adc	r12, r12
     83e:	dd 1c       	adc	r13, r13
     840:	9a 95       	dec	r25
     842:	d1 f7       	brne	.-12     	; 0x838 <pf_lseek+0x8a>
		if (ifptr > 0 &&
     844:	21 15       	cp	r18, r1
     846:	31 05       	cpc	r19, r1
     848:	41 05       	cpc	r20, r1
     84a:	51 05       	cpc	r21, r1
     84c:	a1 f1       	breq	.+104    	; 0x8b6 <pf_lseek+0x108>
     84e:	19 01       	movw	r2, r18
     850:	2a 01       	movw	r4, r20
     852:	08 94       	sec
     854:	21 08       	sbc	r2, r1
     856:	31 08       	sbc	r3, r1
     858:	41 08       	sbc	r4, r1
     85a:	51 08       	sbc	r5, r1
     85c:	c4 01       	movw	r24, r8
     85e:	b3 01       	movw	r22, r6
     860:	61 50       	subi	r22, 0x01	; 1
     862:	70 40       	sbci	r23, 0x00	; 0
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	a6 01       	movw	r20, r12
     86a:	95 01       	movw	r18, r10
     86c:	04 d9       	rcall	.-3576   	; 0xfffffa76 <__eeprom_end+0xff7efa75>
     86e:	79 01       	movw	r14, r18
     870:	8a 01       	movw	r16, r20
     872:	c2 01       	movw	r24, r4
     874:	b1 01       	movw	r22, r2
     876:	a6 01       	movw	r20, r12
     878:	95 01       	movw	r18, r10
     87a:	fd d8       	rcall	.-3590   	; 0xfffffa76 <__eeprom_end+0xff7efa75>
     87c:	e2 16       	cp	r14, r18
     87e:	f3 06       	cpc	r15, r19
     880:	04 07       	cpc	r16, r20
     882:	15 07       	cpc	r17, r21
     884:	c0 f0       	brcs	.+48     	; 0x8b6 <pf_lseek+0x108>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     886:	88 27       	eor	r24, r24
     888:	99 27       	eor	r25, r25
     88a:	dc 01       	movw	r26, r24
     88c:	8a 19       	sub	r24, r10
     88e:	9b 09       	sbc	r25, r11
     890:	ac 09       	sbc	r26, r12
     892:	bd 09       	sbc	r27, r13
     894:	82 21       	and	r24, r2
     896:	93 21       	and	r25, r3
     898:	a4 21       	and	r26, r4
     89a:	b5 21       	and	r27, r5
     89c:	88 8f       	std	Y+24, r24	; 0x18
     89e:	99 8f       	std	Y+25, r25	; 0x19
     8a0:	aa 8f       	std	Y+26, r26	; 0x1a
     8a2:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= fs->fptr;
     8a4:	68 1a       	sub	r6, r24
     8a6:	79 0a       	sbc	r7, r25
     8a8:	8a 0a       	sbc	r8, r26
     8aa:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     8ac:	2c a1       	ldd	r18, Y+36	; 0x24
     8ae:	3d a1       	ldd	r19, Y+37	; 0x25
     8b0:	4e a1       	ldd	r20, Y+38	; 0x26
     8b2:	5f a1       	ldd	r21, Y+39	; 0x27
     8b4:	32 c0       	rjmp	.+100    	; 0x91a <pf_lseek+0x16c>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     8b6:	28 a1       	ldd	r18, Y+32	; 0x20
     8b8:	39 a1       	ldd	r19, Y+33	; 0x21
     8ba:	4a a1       	ldd	r20, Y+34	; 0x22
     8bc:	5b a1       	ldd	r21, Y+35	; 0x23
			fs->curr_clust = clst;
     8be:	2c a3       	std	Y+36, r18	; 0x24
     8c0:	3d a3       	std	Y+37, r19	; 0x25
     8c2:	4e a3       	std	Y+38, r20	; 0x26
     8c4:	5f a3       	std	Y+39, r21	; 0x27
     8c6:	29 c0       	rjmp	.+82     	; 0x91a <pf_lseek+0x16c>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     8c8:	ca 01       	movw	r24, r20
     8ca:	b9 01       	movw	r22, r18
     8cc:	d6 dd       	rcall	.-1108   	; 0x47a <get_fat>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
     8d2:	62 30       	cpi	r22, 0x02	; 2
     8d4:	71 05       	cpc	r23, r1
     8d6:	81 05       	cpc	r24, r1
     8d8:	91 05       	cpc	r25, r1
     8da:	08 f4       	brcc	.+2      	; 0x8de <pf_lseek+0x130>
     8dc:	88 c0       	rjmp	.+272    	; 0x9ee <pf_lseek+0x240>
     8de:	88 85       	ldd	r24, Y+8	; 0x08
     8e0:	99 85       	ldd	r25, Y+9	; 0x09
     8e2:	aa 85       	ldd	r26, Y+10	; 0x0a
     8e4:	bb 85       	ldd	r27, Y+11	; 0x0b
     8e6:	28 17       	cp	r18, r24
     8e8:	39 07       	cpc	r19, r25
     8ea:	4a 07       	cpc	r20, r26
     8ec:	5b 07       	cpc	r21, r27
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <pf_lseek+0x144>
     8f0:	7e c0       	rjmp	.+252    	; 0x9ee <pf_lseek+0x240>
			fs->curr_clust = clst;
     8f2:	2c a3       	std	Y+36, r18	; 0x24
     8f4:	3d a3       	std	Y+37, r19	; 0x25
     8f6:	4e a3       	std	Y+38, r20	; 0x26
     8f8:	5f a3       	std	Y+39, r21	; 0x27
			fs->fptr += bcs;
     8fa:	88 8d       	ldd	r24, Y+24	; 0x18
     8fc:	99 8d       	ldd	r25, Y+25	; 0x19
     8fe:	aa 8d       	ldd	r26, Y+26	; 0x1a
     900:	bb 8d       	ldd	r27, Y+27	; 0x1b
     902:	8a 0d       	add	r24, r10
     904:	9b 1d       	adc	r25, r11
     906:	ac 1d       	adc	r26, r12
     908:	bd 1d       	adc	r27, r13
     90a:	88 8f       	std	Y+24, r24	; 0x18
     90c:	99 8f       	std	Y+25, r25	; 0x19
     90e:	aa 8f       	std	Y+26, r26	; 0x1a
     910:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= bcs;
     912:	6a 18       	sub	r6, r10
     914:	7b 08       	sbc	r7, r11
     916:	8c 08       	sbc	r8, r12
     918:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     91a:	a6 14       	cp	r10, r6
     91c:	b7 04       	cpc	r11, r7
     91e:	c8 04       	cpc	r12, r8
     920:	d9 04       	cpc	r13, r9
     922:	90 f2       	brcs	.-92     	; 0x8c8 <pf_lseek+0x11a>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     924:	88 8d       	ldd	r24, Y+24	; 0x18
     926:	99 8d       	ldd	r25, Y+25	; 0x19
     928:	aa 8d       	ldd	r26, Y+26	; 0x1a
     92a:	bb 8d       	ldd	r27, Y+27	; 0x1b
     92c:	86 0d       	add	r24, r6
     92e:	97 1d       	adc	r25, r7
     930:	a8 1d       	adc	r26, r8
     932:	b9 1d       	adc	r27, r9
     934:	88 8f       	std	Y+24, r24	; 0x18
     936:	99 8f       	std	Y+25, r25	; 0x19
     938:	aa 8f       	std	Y+26, r26	; 0x1a
     93a:	bb 8f       	std	Y+27, r27	; 0x1b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     93c:	00 91 71 00 	lds	r16, 0x0071
     940:	10 91 72 00 	lds	r17, 0x0072


	clst -= 2;
     944:	8e ef       	ldi	r24, 0xFE	; 254
     946:	a8 2e       	mov	r10, r24
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	b8 2e       	mov	r11, r24
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	c8 2e       	mov	r12, r24
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	d8 2e       	mov	r13, r24
     954:	a2 0e       	add	r10, r18
     956:	b3 1e       	adc	r11, r19
     958:	c4 1e       	adc	r12, r20
     95a:	d5 1e       	adc	r13, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     95c:	f8 01       	movw	r30, r16
     95e:	80 85       	ldd	r24, Z+8	; 0x08
     960:	91 85       	ldd	r25, Z+9	; 0x09
     962:	a2 85       	ldd	r26, Z+10	; 0x0a
     964:	b3 85       	ldd	r27, Z+11	; 0x0b
     966:	02 97       	sbiw	r24, 0x02	; 2
     968:	a1 09       	sbc	r26, r1
     96a:	b1 09       	sbc	r27, r1
     96c:	a8 16       	cp	r10, r24
     96e:	b9 06       	cpc	r11, r25
     970:	ca 06       	cpc	r12, r26
     972:	db 06       	cpc	r13, r27
     974:	e0 f5       	brcc	.+120    	; 0x9ee <pf_lseek+0x240>
	return (DWORD)clst * fs->csize + fs->database;
     976:	21 81       	ldd	r18, Z+1	; 0x01
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	c6 01       	movw	r24, r12
     980:	b5 01       	movw	r22, r10
     982:	5a d8       	rcall	.-3916   	; 0xfffffa38 <__eeprom_end+0xff7efa37>
     984:	9b 01       	movw	r18, r22
     986:	ac 01       	movw	r20, r24
     988:	f8 01       	movw	r30, r16
     98a:	84 89       	ldd	r24, Z+20	; 0x14
     98c:	95 89       	ldd	r25, Z+21	; 0x15
     98e:	a6 89       	ldd	r26, Z+22	; 0x16
     990:	b7 89       	ldd	r27, Z+23	; 0x17
     992:	28 0f       	add	r18, r24
     994:	39 1f       	adc	r19, r25
     996:	4a 1f       	adc	r20, r26
     998:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     99a:	21 15       	cp	r18, r1
     99c:	31 05       	cpc	r19, r1
     99e:	41 05       	cpc	r20, r1
     9a0:	51 05       	cpc	r21, r1
     9a2:	29 f1       	breq	.+74     	; 0x9ee <pf_lseek+0x240>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
     9a4:	d4 01       	movw	r26, r8
     9a6:	c3 01       	movw	r24, r6
     9a8:	19 e0       	ldi	r17, 0x09	; 9
     9aa:	b6 95       	lsr	r27
     9ac:	a7 95       	ror	r26
     9ae:	97 95       	ror	r25
     9b0:	87 95       	ror	r24
     9b2:	1a 95       	dec	r17
     9b4:	d1 f7       	brne	.-12     	; 0x9aa <pf_lseek+0x1fc>
     9b6:	98 2f       	mov	r25, r24
     9b8:	8b 83       	std	Y+3, r24	; 0x03
		if (ofs % 512)
     9ba:	ff ef       	ldi	r31, 0xFF	; 255
     9bc:	ef 2e       	mov	r14, r31
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	ff 2e       	mov	r15, r31
     9c2:	01 2d       	mov	r16, r1
     9c4:	11 2d       	mov	r17, r1
     9c6:	6e 20       	and	r6, r14
     9c8:	7f 20       	and	r7, r15
     9ca:	80 22       	and	r8, r16
     9cc:	91 22       	and	r9, r17
     9ce:	61 14       	cp	r6, r1
     9d0:	71 04       	cpc	r7, r1
     9d2:	81 04       	cpc	r8, r1
     9d4:	91 04       	cpc	r9, r1
     9d6:	71 f0       	breq	.+28     	; 0x9f4 <pf_lseek+0x246>
			fs->dsect = sect + fs->csect++;
     9d8:	28 0f       	add	r18, r24
     9da:	31 1d       	adc	r19, r1
     9dc:	41 1d       	adc	r20, r1
     9de:	51 1d       	adc	r21, r1
     9e0:	28 a7       	std	Y+40, r18	; 0x28
     9e2:	39 a7       	std	Y+41, r19	; 0x29
     9e4:	4a a7       	std	Y+42, r20	; 0x2a
     9e6:	5b a7       	std	Y+43, r21	; 0x2b
     9e8:	9f 5f       	subi	r25, 0xFF	; 255
     9ea:	9b 83       	std	Y+3, r25	; 0x03
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <pf_lseek+0x246>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     9ee:	1a 82       	std	Y+2, r1	; 0x02
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <pf_lseek+0x248>
	return FR_DISK_ERR;
     9f4:	80 e0       	ldi	r24, 0x00	; 0
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	af 90       	pop	r10
     a0a:	9f 90       	pop	r9
     a0c:	8f 90       	pop	r8
     a0e:	7f 90       	pop	r7
     a10:	6f 90       	pop	r6
     a12:	5f 90       	pop	r5
     a14:	4f 90       	pop	r4
     a16:	3f 90       	pop	r3
     a18:	2f 90       	pop	r2
     a1a:	08 95       	ret

00000a1c <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	ac 97       	sbiw	r28, 0x2c	; 44
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	7c 01       	movw	r14, r24
     a42:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     a44:	e0 91 71 00 	lds	r30, 0x0071
     a48:	f0 91 72 00 	lds	r31, 0x0072


	if (!fs) {				/* Check file system */
     a4c:	30 97       	sbiw	r30, 0x00	; 0
     a4e:	11 f4       	brne	.+4      	; 0xa54 <pf_readdir+0x38>
     a50:	86 e0       	ldi	r24, 0x06	; 6
     a52:	c2 c0       	rjmp	.+388    	; 0xbd8 <pf_readdir+0x1bc>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     a54:	ce 01       	movw	r24, r28
     a56:	0d 96       	adiw	r24, 0x0d	; 13
     a58:	97 83       	std	Z+7, r25	; 0x07
     a5a:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	d7 01       	movw	r26, r14
     a62:	13 96       	adiw	r26, 0x03	; 3
     a64:	9c 93       	st	X, r25
     a66:	8e 93       	st	-X, r24
     a68:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     a6a:	61 15       	cp	r22, r1
     a6c:	71 05       	cpc	r23, r1
     a6e:	19 f4       	brne	.+6      	; 0xa76 <pf_readdir+0x5a>
			res = dir_rewind(dj);
     a70:	c7 01       	movw	r24, r14
     a72:	85 dc       	rcall	.-1782   	; 0x37e <dir_rewind>
     a74:	b1 c0       	rjmp	.+354    	; 0xbd8 <pf_readdir+0x1bc>
	FRESULT res;
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
     a76:	c6 80       	ldd	r12, Z+6	; 0x06
     a78:	d7 80       	ldd	r13, Z+7	; 0x07
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	24 c0       	rjmp	.+72     	; 0xac6 <pf_readdir+0xaa>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     a7e:	f7 01       	movw	r30, r14
     a80:	20 81       	ld	r18, Z
     a82:	31 81       	ldd	r19, Z+1	; 0x01
     a84:	2f 70       	andi	r18, 0x0F	; 15
     a86:	30 70       	andi	r19, 0x00	; 0
     a88:	e5 e0       	ldi	r30, 0x05	; 5
     a8a:	22 0f       	add	r18, r18
     a8c:	33 1f       	adc	r19, r19
     a8e:	ea 95       	dec	r30
     a90:	e1 f7       	brne	.-8      	; 0xa8a <pf_readdir+0x6e>
     a92:	c6 01       	movw	r24, r12
     a94:	00 e2       	ldi	r16, 0x20	; 32
     a96:	10 e0       	ldi	r17, 0x00	; 0
     a98:	5e d6       	rcall	.+3260   	; 0x1756 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     a9a:	88 23       	and	r24, r24
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <pf_readdir+0x86>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	1e c0       	rjmp	.+60     	; 0xade <pf_readdir+0xc2>
		c = dir[DIR_Name];
     aa2:	d6 01       	movw	r26, r12
     aa4:	9c 91       	ld	r25, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     aa6:	99 23       	and	r25, r25
     aa8:	09 f4       	brne	.+2      	; 0xaac <pf_readdir+0x90>
     aaa:	a7 c0       	rjmp	.+334    	; 0xbfa <pf_readdir+0x1de>
		a = dir[DIR_Attr] & AM_MASK;
     aac:	1b 96       	adiw	r26, 0x0b	; 11
     aae:	8c 91       	ld	r24, X
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     ab0:	95 3e       	cpi	r25, 0xE5	; 229
     ab2:	29 f0       	breq	.+10     	; 0xabe <pf_readdir+0xa2>
     ab4:	9e 32       	cpi	r25, 0x2E	; 46
     ab6:	19 f0       	breq	.+6      	; 0xabe <pf_readdir+0xa2>
     ab8:	8f 73       	andi	r24, 0x3F	; 63
     aba:	83 ff       	sbrs	r24, 3
     abc:	1c c0       	rjmp	.+56     	; 0xaf6 <pf_readdir+0xda>
			break;
		res = dir_next(dj);				/* Next entry */
     abe:	c7 01       	movw	r24, r14
     ac0:	c4 dd       	rcall	.-1144   	; 0x64a <dir_next>
		if (res != FR_OK) break;
     ac2:	88 23       	and	r24, r24
     ac4:	61 f4       	brne	.+24     	; 0xade <pf_readdir+0xc2>
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
	while (dj->sect) {
     ac6:	f7 01       	movw	r30, r14
     ac8:	44 85       	ldd	r20, Z+12	; 0x0c
     aca:	55 85       	ldd	r21, Z+13	; 0x0d
     acc:	66 85       	ldd	r22, Z+14	; 0x0e
     ace:	77 85       	ldd	r23, Z+15	; 0x0f
     ad0:	41 15       	cp	r20, r1
     ad2:	51 05       	cpc	r21, r1
     ad4:	61 05       	cpc	r22, r1
     ad6:	71 05       	cpc	r23, r1
     ad8:	91 f6       	brne	.-92     	; 0xa7e <pf_readdir+0x62>
			break;
		res = dir_next(dj);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     ada:	88 23       	and	r24, r24
     adc:	61 f0       	breq	.+24     	; 0xaf6 <pf_readdir+0xda>
     ade:	d7 01       	movw	r26, r14
     ae0:	1c 96       	adiw	r26, 0x0c	; 12
     ae2:	1d 92       	st	X+, r1
     ae4:	1d 92       	st	X+, r1
     ae6:	1d 92       	st	X+, r1
     ae8:	1c 92       	st	X, r1
     aea:	1f 97       	sbiw	r26, 0x0f	; 15
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
     aec:	83 30       	cpi	r24, 0x03	; 3
     aee:	19 f0       	breq	.+6      	; 0xaf6 <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     af0:	88 23       	and	r24, r24
     af2:	09 f0       	breq	.+2      	; 0xaf6 <pf_readdir+0xda>
     af4:	71 c0       	rjmp	.+226    	; 0xbd8 <pf_readdir+0x1bc>
{
	BYTE i, c, *dir;
	char *p;


	p = fno->fname;
     af6:	95 01       	movw	r18, r10
     af8:	27 5f       	subi	r18, 0xF7	; 247
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     afc:	f7 01       	movw	r30, r14
     afe:	84 85       	ldd	r24, Z+12	; 0x0c
     b00:	95 85       	ldd	r25, Z+13	; 0x0d
     b02:	a6 85       	ldd	r26, Z+14	; 0x0e
     b04:	b7 85       	ldd	r27, Z+15	; 0x0f
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	a1 05       	cpc	r26, r1
     b0a:	b1 05       	cpc	r27, r1
     b0c:	09 f4       	brne	.+2      	; 0xb10 <pf_readdir+0xf4>
     b0e:	56 c0       	rjmp	.+172    	; 0xbbc <pf_readdir+0x1a0>
		dir = FatFs->buf;
     b10:	e0 91 71 00 	lds	r30, 0x0071
     b14:	f0 91 72 00 	lds	r31, 0x0072
     b18:	46 81       	ldd	r20, Z+6	; 0x06
     b1a:	57 81       	ldd	r21, Z+7	; 0x07
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
     b20:	fa 01       	movw	r30, r20
     b22:	e8 0f       	add	r30, r24
     b24:	f9 1f       	adc	r31, r25
     b26:	e0 81       	ld	r30, Z
			if (c == ' ') break;
     b28:	e0 32       	cpi	r30, 0x20	; 32
     b2a:	51 f0       	breq	.+20     	; 0xb40 <pf_readdir+0x124>
			if (c == 0x05) c = 0xE5;
     b2c:	e5 30       	cpi	r30, 0x05	; 5
     b2e:	09 f4       	brne	.+2      	; 0xb32 <pf_readdir+0x116>
     b30:	e5 ee       	ldi	r30, 0xE5	; 229
			*p++ = c;
     b32:	d9 01       	movw	r26, r18
     b34:	ed 93       	st	X+, r30
     b36:	9d 01       	movw	r18, r26
     b38:	01 96       	adiw	r24, 0x01	; 1


	p = fno->fname;
	if (dj->sect) {
		dir = FatFs->buf;
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     b3a:	88 30       	cpi	r24, 0x08	; 8
     b3c:	91 05       	cpc	r25, r1
     b3e:	81 f7       	brne	.-32     	; 0xb20 <pf_readdir+0x104>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     b40:	fa 01       	movw	r30, r20
     b42:	80 85       	ldd	r24, Z+8	; 0x08
     b44:	80 32       	cpi	r24, 0x20	; 32
     b46:	11 f4       	brne	.+4      	; 0xb4c <pf_readdir+0x130>
     b48:	f9 01       	movw	r30, r18
     b4a:	10 c0       	rjmp	.+32     	; 0xb6c <pf_readdir+0x150>
			*p++ = '.';
     b4c:	f9 01       	movw	r30, r18
     b4e:	8e e2       	ldi	r24, 0x2E	; 46
     b50:	81 93       	st	Z+, r24
     b52:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
     b54:	2c 5f       	subi	r18, 0xFC	; 252
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
     b58:	18 96       	adiw	r26, 0x08	; 8
     b5a:	8c 91       	ld	r24, X
     b5c:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
     b5e:	80 32       	cpi	r24, 0x20	; 32
     b60:	29 f0       	breq	.+10     	; 0xb6c <pf_readdir+0x150>
				*p++ = c;
     b62:	81 93       	st	Z+, r24
     b64:	11 96       	adiw	r26, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     b66:	e2 17       	cp	r30, r18
     b68:	f3 07       	cpc	r31, r19
     b6a:	b1 f7       	brne	.-20     	; 0xb58 <pf_readdir+0x13c>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     b6c:	da 01       	movw	r26, r20
     b6e:	1b 96       	adiw	r26, 0x0b	; 11
     b70:	8c 91       	ld	r24, X
     b72:	d5 01       	movw	r26, r10
     b74:	18 96       	adiw	r26, 0x08	; 8
     b76:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     b78:	da 01       	movw	r26, r20
     b7a:	5c 96       	adiw	r26, 0x1c	; 28
     b7c:	0d 91       	ld	r16, X+
     b7e:	1d 91       	ld	r17, X+
     b80:	2d 91       	ld	r18, X+
     b82:	3c 91       	ld	r19, X
     b84:	5f 97       	sbiw	r26, 0x1f	; 31
     b86:	d5 01       	movw	r26, r10
     b88:	0d 93       	st	X+, r16
     b8a:	1d 93       	st	X+, r17
     b8c:	2d 93       	st	X+, r18
     b8e:	3c 93       	st	X, r19
     b90:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     b92:	da 01       	movw	r26, r20
     b94:	58 96       	adiw	r26, 0x18	; 24
     b96:	8d 91       	ld	r24, X+
     b98:	9c 91       	ld	r25, X
     b9a:	59 97       	sbiw	r26, 0x19	; 25
     b9c:	d5 01       	movw	r26, r10
     b9e:	15 96       	adiw	r26, 0x05	; 5
     ba0:	9c 93       	st	X, r25
     ba2:	8e 93       	st	-X, r24
     ba4:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     ba6:	da 01       	movw	r26, r20
     ba8:	56 96       	adiw	r26, 0x16	; 22
     baa:	8d 91       	ld	r24, X+
     bac:	9c 91       	ld	r25, X
     bae:	57 97       	sbiw	r26, 0x17	; 23
     bb0:	d5 01       	movw	r26, r10
     bb2:	17 96       	adiw	r26, 0x07	; 7
     bb4:	9c 93       	st	X, r25
     bb6:	8e 93       	st	-X, r24
     bb8:	16 97       	sbiw	r26, 0x06	; 6
     bba:	9f 01       	movw	r18, r30
	}
	*p = 0;
     bbc:	f9 01       	movw	r30, r18
     bbe:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
     bc0:	c7 01       	movw	r24, r14
     bc2:	43 dd       	rcall	.-1402   	; 0x64a <dir_next>
				if (res == FR_NO_FILE) {
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	41 f4       	brne	.+16     	; 0xbd8 <pf_readdir+0x1bc>
					dj->sect = 0;
     bc8:	d7 01       	movw	r26, r14
     bca:	1c 96       	adiw	r26, 0x0c	; 12
     bcc:	1d 92       	st	X+, r1
     bce:	1d 92       	st	X+, r1
     bd0:	1d 92       	st	X+, r1
     bd2:	1c 92       	st	X, r1
     bd4:	1f 97       	sbiw	r26, 0x0f	; 15
     bd6:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
     bd8:	ac 96       	adiw	r28, 0x2c	; 44
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	70 cf       	rjmp	.-288    	; 0xade <pf_readdir+0xc2>

00000bfe <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
     bfe:	8f 92       	push	r8
     c00:	9f 92       	push	r9
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ec 01       	movw	r28, r24
     c18:	7b 01       	movw	r14, r22
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <follow_path+0x24>
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
     c1c:	08 94       	sec
     c1e:	e1 1c       	adc	r14, r1
     c20:	f1 1c       	adc	r15, r1
     c22:	f7 01       	movw	r30, r14
     c24:	80 81       	ld	r24, Z
     c26:	80 32       	cpi	r24, 0x20	; 32
     c28:	c9 f3       	breq	.-14     	; 0xc1c <follow_path+0x1e>
	if (*path == '/') path++;			/* Strip heading separator */
     c2a:	8f 32       	cpi	r24, 0x2F	; 47
     c2c:	19 f4       	brne	.+6      	; 0xc34 <follow_path+0x36>
     c2e:	08 94       	sec
     c30:	e1 1c       	adc	r14, r1
     c32:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
     c34:	1c 82       	std	Y+4, r1	; 0x04
     c36:	1d 82       	std	Y+5, r1	; 0x05
     c38:	1e 82       	std	Y+6, r1	; 0x06
     c3a:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     c3c:	f7 01       	movw	r30, r14
     c3e:	80 81       	ld	r24, Z
     c40:	81 32       	cpi	r24, 0x21	; 33
     c42:	60 f4       	brcc	.+24     	; 0xc5c <follow_path+0x5e>
		res = dir_rewind(dj);
     c44:	ce 01       	movw	r24, r28
     c46:	9b db       	rcall	.-2250   	; 0x37e <dir_rewind>
     c48:	b8 2e       	mov	r11, r24
		FatFs->buf[0] = 0;
     c4a:	e0 91 71 00 	lds	r30, 0x0071
     c4e:	f0 91 72 00 	lds	r31, 0x0072
     c52:	06 80       	ldd	r0, Z+6	; 0x06
     c54:	f7 81       	ldd	r31, Z+7	; 0x07
     c56:	e0 2d       	mov	r30, r0
     c58:	10 82       	st	Z, r1
     c5a:	a7 c0       	rjmp	.+334    	; 0xdaa <follow_path+0x1ac>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     c5c:	80 e2       	ldi	r24, 0x20	; 32
     c5e:	88 2e       	mov	r8, r24
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     c60:	99 24       	eor	r9, r9
     c62:	93 94       	inc	r9
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     c64:	aa 81       	ldd	r26, Y+2	; 0x02
     c66:	bb 81       	ldd	r27, Y+3	; 0x03
     c68:	fd 01       	movw	r30, r26
     c6a:	8b e0       	ldi	r24, 0x0B	; 11
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     c70:	81 92       	st	Z+, r8
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	2f ef       	ldi	r18, 0xFF	; 255
     c76:	8f 3f       	cpi	r24, 0xFF	; 255
     c78:	92 07       	cpc	r25, r18
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <follow_path+0x72>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	aa 24       	eor	r10, r10
     c80:	38 e0       	ldi	r19, 0x08	; 8
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <follow_path+0x8a>
     c84:	28 e0       	ldi	r18, 0x08	; 8
     c86:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     c88:	f7 01       	movw	r30, r14
     c8a:	ea 0d       	add	r30, r10
     c8c:	f1 1d       	adc	r31, r1
     c8e:	90 81       	ld	r25, Z
     c90:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     c92:	91 32       	cpi	r25, 0x21	; 33
     c94:	b0 f0       	brcs	.+44     	; 0xcc2 <follow_path+0xc4>
     c96:	9f 32       	cpi	r25, 0x2F	; 47
     c98:	a1 f0       	breq	.+40     	; 0xcc2 <follow_path+0xc4>
		if (c == '.' || i >= ni) {
     c9a:	9e 32       	cpi	r25, 0x2E	; 46
     c9c:	11 f0       	breq	.+4      	; 0xca2 <follow_path+0xa4>
     c9e:	23 17       	cp	r18, r19
     ca0:	28 f0       	brcs	.+10     	; 0xcac <follow_path+0xae>
			if (ni != 8 || c != '.') break;
     ca2:	38 30       	cpi	r19, 0x08	; 8
     ca4:	71 f4       	brne	.+28     	; 0xcc2 <follow_path+0xc4>
     ca6:	9e 32       	cpi	r25, 0x2E	; 46
     ca8:	69 f3       	breq	.-38     	; 0xc84 <follow_path+0x86>
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <follow_path+0xc4>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     cac:	89 2f       	mov	r24, r25
     cae:	81 56       	subi	r24, 0x61	; 97
     cb0:	8a 31       	cpi	r24, 0x1A	; 26
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <follow_path+0xb8>
     cb4:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
     cb6:	fd 01       	movw	r30, r26
     cb8:	e2 0f       	add	r30, r18
     cba:	f1 1d       	adc	r31, r1
     cbc:	90 83       	st	Z, r25
     cbe:	2f 5f       	subi	r18, 0xFF	; 255
     cc0:	e3 cf       	rjmp	.-58     	; 0xc88 <follow_path+0x8a>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     cc2:	1b 96       	adiw	r26, 0x0b	; 11
     cc4:	1c 92       	st	X, r1
     cc6:	1b 97       	sbiw	r26, 0x0b	; 11
     cc8:	91 32       	cpi	r25, 0x21	; 33
     cca:	10 f4       	brcc	.+4      	; 0xcd0 <follow_path+0xd2>
     ccc:	1b 96       	adiw	r26, 0x0b	; 11
     cce:	9c 92       	st	X, r9
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
     cd0:	ce 01       	movw	r24, r28
     cd2:	55 db       	rcall	.-2390   	; 0x37e <dir_rewind>
     cd4:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
     cd6:	88 23       	and	r24, r24
     cd8:	e9 f5       	brne	.+122    	; 0xd54 <follow_path+0x156>

	dir = FatFs->buf;
     cda:	e0 91 71 00 	lds	r30, 0x0071
     cde:	f0 91 72 00 	lds	r31, 0x0072
     ce2:	c6 80       	ldd	r12, Z+6	; 0x06
     ce4:	d7 80       	ldd	r13, Z+7	; 0x07
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     ce6:	4c 85       	ldd	r20, Y+12	; 0x0c
     ce8:	5d 85       	ldd	r21, Y+13	; 0x0d
     cea:	6e 85       	ldd	r22, Y+14	; 0x0e
     cec:	7f 85       	ldd	r23, Y+15	; 0x0f
     cee:	28 81       	ld	r18, Y
     cf0:	39 81       	ldd	r19, Y+1	; 0x01
     cf2:	2f 70       	andi	r18, 0x0F	; 15
     cf4:	30 70       	andi	r19, 0x00	; 0
     cf6:	05 e0       	ldi	r16, 0x05	; 5
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	0a 95       	dec	r16
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <follow_path+0xfa>
     d00:	c6 01       	movw	r24, r12
     d02:	00 e2       	ldi	r16, 0x20	; 32
     d04:	10 e0       	ldi	r17, 0x00	; 0
     d06:	27 d5       	rcall	.+2638   	; 0x1756 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     d08:	88 23       	and	r24, r24
     d0a:	11 f0       	breq	.+4      	; 0xd10 <follow_path+0x112>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	21 c0       	rjmp	.+66     	; 0xd52 <follow_path+0x154>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     d10:	f6 01       	movw	r30, r12
     d12:	80 81       	ld	r24, Z
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <follow_path+0x11c>
     d18:	56 c0       	rjmp	.+172    	; 0xdc6 <follow_path+0x1c8>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     d1a:	83 85       	ldd	r24, Z+11	; 0x0b
     d1c:	83 fd       	sbrc	r24, 3
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <follow_path+0x14c>
     d20:	d6 01       	movw	r26, r12
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	9c 01       	movw	r18, r24
     d28:	f9 01       	movw	r30, r18
     d2a:	2b e0       	ldi	r18, 0x0B	; 11
     d2c:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     d2e:	21 50       	subi	r18, 0x01	; 1
     d30:	30 40       	sbci	r19, 0x00	; 0
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	2f 3f       	cpi	r18, 0xFF	; 255
     d36:	38 07       	cpc	r19, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <follow_path+0x13e>
     d3a:	48 c0       	rjmp	.+144    	; 0xdcc <follow_path+0x1ce>
     d3c:	9c 91       	ld	r25, X
     d3e:	80 81       	ld	r24, Z
     d40:	98 17       	cp	r25, r24
     d42:	19 f4       	brne	.+6      	; 0xd4a <follow_path+0x14c>
     d44:	11 96       	adiw	r26, 0x01	; 1
     d46:	31 96       	adiw	r30, 0x01	; 1
     d48:	f2 cf       	rjmp	.-28     	; 0xd2e <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
     d4a:	ce 01       	movw	r24, r28
     d4c:	7e dc       	rcall	.-1796   	; 0x64a <dir_next>
	} while (res == FR_OK);
     d4e:	88 23       	and	r24, r24
     d50:	51 f2       	breq	.-108    	; 0xce6 <follow_path+0xe8>
     d52:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     d54:	e3 e0       	ldi	r30, 0x03	; 3
     d56:	be 16       	cp	r11, r30
     d58:	41 f5       	brne	.+80     	; 0xdaa <follow_path+0x1ac>
     d5a:	ea 81       	ldd	r30, Y+2	; 0x02
     d5c:	fb 81       	ldd	r31, Y+3	; 0x03
     d5e:	83 85       	ldd	r24, Z+11	; 0x0b
     d60:	88 23       	and	r24, r24
     d62:	09 f1       	breq	.+66     	; 0xda6 <follow_path+0x1a8>
     d64:	22 c0       	rjmp	.+68     	; 0xdaa <follow_path+0x1ac>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
     d66:	e0 91 71 00 	lds	r30, 0x0071
     d6a:	f0 91 72 00 	lds	r31, 0x0072
     d6e:	06 80       	ldd	r0, Z+6	; 0x06
     d70:	f7 81       	ldd	r31, Z+7	; 0x07
     d72:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     d74:	83 85       	ldd	r24, Z+11	; 0x0b
     d76:	84 ff       	sbrs	r24, 4
     d78:	16 c0       	rjmp	.+44     	; 0xda6 <follow_path+0x1a8>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     d7a:	ea 0c       	add	r14, r10
     d7c:	f1 1c       	adc	r15, r1
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
     d7e:	84 89       	ldd	r24, Z+20	; 0x14
     d80:	95 89       	ldd	r25, Z+21	; 0x15
     d82:	a0 e0       	ldi	r26, 0x00	; 0
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	dc 01       	movw	r26, r24
     d88:	99 27       	eor	r25, r25
     d8a:	88 27       	eor	r24, r24
     d8c:	22 8d       	ldd	r18, Z+26	; 0x1a
     d8e:	33 8d       	ldd	r19, Z+27	; 0x1b
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	82 2b       	or	r24, r18
     d96:	93 2b       	or	r25, r19
     d98:	a4 2b       	or	r26, r20
     d9a:	b5 2b       	or	r27, r21
     d9c:	8c 83       	std	Y+4, r24	; 0x04
     d9e:	9d 83       	std	Y+5, r25	; 0x05
     da0:	ae 83       	std	Y+6, r26	; 0x06
     da2:	bf 83       	std	Y+7, r27	; 0x07
     da4:	5f cf       	rjmp	.-322    	; 0xc64 <follow_path+0x66>
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
     da6:	a4 e0       	ldi	r26, 0x04	; 4
     da8:	ba 2e       	mov	r11, r26
	}

	return res;
}
     daa:	8b 2d       	mov	r24, r11
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	9f 90       	pop	r9
     dc2:	8f 90       	pop	r8
     dc4:	08 95       	ret
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
     dc6:	f3 e0       	ldi	r31, 0x03	; 3
     dc8:	bf 2e       	mov	r11, r31
     dca:	c7 cf       	rjmp	.-114    	; 0xd5a <follow_path+0x15c>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
     dcc:	ea 81       	ldd	r30, Y+2	; 0x02
     dce:	fb 81       	ldd	r31, Y+3	; 0x03
     dd0:	83 85       	ldd	r24, Z+11	; 0x0b
     dd2:	88 23       	and	r24, r24
     dd4:	41 f2       	breq	.-112    	; 0xd66 <follow_path+0x168>
     dd6:	e9 cf       	rjmp	.-46     	; 0xdaa <follow_path+0x1ac>

00000dd8 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	ac 97       	sbiw	r28, 0x2c	; 44
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     df6:	e0 91 71 00 	lds	r30, 0x0071
     dfa:	f0 91 72 00 	lds	r31, 0x0072


	if (!fs) {				/* Check file system */
     dfe:	30 97       	sbiw	r30, 0x00	; 0
     e00:	11 f4       	brne	.+4      	; 0xe06 <pf_opendir+0x2e>
     e02:	86 e0       	ldi	r24, 0x06	; 6
     e04:	30 c0       	rjmp	.+96     	; 0xe66 <pf_opendir+0x8e>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     e06:	3d e0       	ldi	r19, 0x0D	; 13
     e08:	e3 2e       	mov	r14, r19
     e0a:	f1 2c       	mov	r15, r1
     e0c:	ec 0e       	add	r14, r28
     e0e:	fd 1e       	adc	r15, r29
     e10:	f7 82       	std	Z+7, r15	; 0x07
     e12:	e6 82       	std	Z+6, r14	; 0x06
		dj->fn = sp;
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	f8 01       	movw	r30, r16
     e1a:	93 83       	std	Z+3, r25	; 0x03
     e1c:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
     e1e:	c8 01       	movw	r24, r16
     e20:	ee de       	rcall	.-548    	; 0xbfe <follow_path>
		if (res == FR_OK) {						/* Follow completed */
     e22:	88 23       	and	r24, r24
     e24:	e9 f4       	brne	.+58     	; 0xe60 <pf_opendir+0x88>
			if (dir[0]) {						/* It is not the root dir */
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	88 23       	and	r24, r24
     e2a:	c1 f0       	breq	.+48     	; 0xe5c <pf_opendir+0x84>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
     e2c:	88 8d       	ldd	r24, Y+24	; 0x18
     e2e:	84 ff       	sbrs	r24, 4
     e30:	19 c0       	rjmp	.+50     	; 0xe64 <pf_opendir+0x8c>
					dj->sclust =
     e32:	f7 01       	movw	r30, r14
     e34:	84 89       	ldd	r24, Z+20	; 0x14
     e36:	95 89       	ldd	r25, Z+21	; 0x15
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	dc 01       	movw	r26, r24
     e3e:	99 27       	eor	r25, r25
     e40:	88 27       	eor	r24, r24
     e42:	22 8d       	ldd	r18, Z+26	; 0x1a
     e44:	33 8d       	ldd	r19, Z+27	; 0x1b
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	82 2b       	or	r24, r18
     e4c:	93 2b       	or	r25, r19
     e4e:	a4 2b       	or	r26, r20
     e50:	b5 2b       	or	r27, r21
     e52:	f8 01       	movw	r30, r16
     e54:	84 83       	std	Z+4, r24	; 0x04
     e56:	95 83       	std	Z+5, r25	; 0x05
     e58:	a6 83       	std	Z+6, r26	; 0x06
     e5a:	b7 83       	std	Z+7, r27	; 0x07
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
     e5c:	c8 01       	movw	r24, r16
     e5e:	8f da       	rcall	.-2786   	; 0x37e <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	09 f4       	brne	.+2      	; 0xe66 <pf_opendir+0x8e>
     e64:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
     e66:	ac 96       	adiw	r28, 0x2c	; 44
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	08 95       	ret

00000e80 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	ec 97       	sbiw	r28, 0x3c	; 60
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	bc 01       	movw	r22, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     e9e:	00 91 71 00 	lds	r16, 0x0071
     ea2:	10 91 72 00 	lds	r17, 0x0072


	if (!fs)						/* Check file system */
     ea6:	01 15       	cp	r16, r1
     ea8:	11 05       	cpc	r17, r1
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <pf_open+0x30>
     eac:	66 e0       	ldi	r22, 0x06	; 6
     eae:	40 c0       	rjmp	.+128    	; 0xf30 <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
     eb0:	f8 01       	movw	r30, r16
     eb2:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
     eb4:	5d e1       	ldi	r21, 0x1D	; 29
     eb6:	e5 2e       	mov	r14, r21
     eb8:	f1 2c       	mov	r15, r1
     eba:	ec 0e       	add	r14, r28
     ebc:	fd 1e       	adc	r15, r29
     ebe:	f7 82       	std	Z+7, r15	; 0x07
     ec0:	e6 82       	std	Z+6, r14	; 0x06
	dj.fn = sp;
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	98 8b       	std	Y+16, r25	; 0x10
     ec8:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, path);	/* Follow the file path */
     eca:	ce 01       	movw	r24, r28
     ecc:	0d 96       	adiw	r24, 0x0d	; 13
     ece:	97 de       	rcall	.-722    	; 0xbfe <follow_path>
     ed0:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;	/* Follow failed */
     ed2:	88 23       	and	r24, r24
     ed4:	69 f5       	brne	.+90     	; 0xf30 <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
     ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed8:	88 23       	and	r24, r24
     eda:	49 f1       	breq	.+82     	; 0xf2e <pf_open+0xae>
     edc:	88 a5       	ldd	r24, Y+40	; 0x28
     ede:	84 fd       	sbrc	r24, 4
     ee0:	26 c0       	rjmp	.+76     	; 0xf2e <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
     ee2:	f7 01       	movw	r30, r14
     ee4:	84 89       	ldd	r24, Z+20	; 0x14
     ee6:	95 89       	ldd	r25, Z+21	; 0x15
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	dc 01       	movw	r26, r24
     eee:	99 27       	eor	r25, r25
     ef0:	88 27       	eor	r24, r24
     ef2:	22 8d       	ldd	r18, Z+26	; 0x1a
     ef4:	33 8d       	ldd	r19, Z+27	; 0x1b
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	82 2b       	or	r24, r18
     efc:	93 2b       	or	r25, r19
     efe:	a4 2b       	or	r26, r20
     f00:	b5 2b       	or	r27, r21
     f02:	f8 01       	movw	r30, r16
     f04:	80 a3       	std	Z+32, r24	; 0x20
     f06:	91 a3       	std	Z+33, r25	; 0x21
     f08:	a2 a3       	std	Z+34, r26	; 0x22
     f0a:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
     f0c:	f7 01       	movw	r30, r14
     f0e:	84 8d       	ldd	r24, Z+28	; 0x1c
     f10:	95 8d       	ldd	r25, Z+29	; 0x1d
     f12:	a6 8d       	ldd	r26, Z+30	; 0x1e
     f14:	b7 8d       	ldd	r27, Z+31	; 0x1f
     f16:	f8 01       	movw	r30, r16
     f18:	84 8f       	std	Z+28, r24	; 0x1c
     f1a:	95 8f       	std	Z+29, r25	; 0x1d
     f1c:	a6 8f       	std	Z+30, r26	; 0x1e
     f1e:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
     f20:	10 8e       	std	Z+24, r1	; 0x18
     f22:	11 8e       	std	Z+25, r1	; 0x19
     f24:	12 8e       	std	Z+26, r1	; 0x1a
     f26:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	82 83       	std	Z+2, r24	; 0x02
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <pf_open+0xb0>

	return FR_OK;
     f2e:	63 e0       	ldi	r22, 0x03	; 3
}
     f30:	86 2f       	mov	r24, r22
     f32:	ec 96       	adiw	r28, 0x3c	; 60
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	08 95       	ret

00000f4c <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
     f4c:	4f 92       	push	r4
     f4e:	5f 92       	push	r5
     f50:	6f 92       	push	r6
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	3c 01       	movw	r6, r24
     f6e:	6b 01       	movw	r12, r22
     f70:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
     f72:	c0 91 71 00 	lds	r28, 0x0071
     f76:	d0 91 72 00 	lds	r29, 0x0072


	*br = 0;
     f7a:	fa 01       	movw	r30, r20
     f7c:	11 82       	std	Z+1, r1	; 0x01
     f7e:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     f80:	20 97       	sbiw	r28, 0x00	; 0
     f82:	11 f4       	brne	.+4      	; 0xf88 <pf_read+0x3c>
     f84:	86 e0       	ldi	r24, 0x06	; 6
     f86:	d6 c0       	rjmp	.+428    	; 0x1134 <pf_read+0x1e8>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	80 fd       	sbrc	r24, 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <pf_read+0x46>
     f8e:	85 e0       	ldi	r24, 0x05	; 5
     f90:	d1 c0       	rjmp	.+418    	; 0x1134 <pf_read+0x1e8>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
     f92:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f94:	3d 8d       	ldd	r19, Y+29	; 0x1d
     f96:	4e 8d       	ldd	r20, Y+30	; 0x1e
     f98:	5f 8d       	ldd	r21, Y+31	; 0x1f
     f9a:	88 8d       	ldd	r24, Y+24	; 0x18
     f9c:	99 8d       	ldd	r25, Y+25	; 0x19
     f9e:	aa 8d       	ldd	r26, Y+26	; 0x1a
     fa0:	bb 8d       	ldd	r27, Y+27	; 0x1b
     fa2:	28 1b       	sub	r18, r24
     fa4:	39 0b       	sbc	r19, r25
     fa6:	4a 0b       	sbc	r20, r26
     fa8:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
     faa:	cb 01       	movw	r24, r22
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	4a 07       	cpc	r20, r26
     fb6:	5b 07       	cpc	r21, r27
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <pf_read+0x70>
     fba:	69 01       	movw	r12, r18
)
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
     fbc:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
     fbe:	41 2c       	mov	r4, r1
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	5f 2e       	mov	r5, r31
     fc4:	af c0       	rjmp	.+350    	; 0x1124 <pf_read+0x1d8>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
     fc6:	e8 8c       	ldd	r14, Y+24	; 0x18
     fc8:	f9 8c       	ldd	r15, Y+25	; 0x19
     fca:	0a 8d       	ldd	r16, Y+26	; 0x1a
     fcc:	1b 8d       	ldd	r17, Y+27	; 0x1b
     fce:	d8 01       	movw	r26, r16
     fd0:	c7 01       	movw	r24, r14
     fd2:	91 70       	andi	r25, 0x01	; 1
     fd4:	a0 70       	andi	r26, 0x00	; 0
     fd6:	b0 70       	andi	r27, 0x00	; 0
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	a1 05       	cpc	r26, r1
     fdc:	b1 05       	cpc	r27, r1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <pf_read+0x96>
     fe0:	68 c0       	rjmp	.+208    	; 0x10b2 <pf_read+0x166>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
     fe2:	c8 01       	movw	r24, r16
     fe4:	b7 01       	movw	r22, r14
     fe6:	e9 e0       	ldi	r30, 0x09	; 9
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	77 95       	ror	r23
     fee:	67 95       	ror	r22
     ff0:	ea 95       	dec	r30
     ff2:	d1 f7       	brne	.-12     	; 0xfe8 <pf_read+0x9c>
     ff4:	29 81       	ldd	r18, Y+1	; 0x01
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	3c d5       	rcall	.+2680   	; 0x1a76 <__udivmodsi4>
     ffe:	61 15       	cp	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	81 05       	cpc	r24, r1
    1004:	91 05       	cpc	r25, r1
    1006:	d1 f4       	brne	.+52     	; 0x103c <pf_read+0xf0>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1008:	e1 14       	cp	r14, r1
    100a:	f1 04       	cpc	r15, r1
    100c:	01 05       	cpc	r16, r1
    100e:	11 05       	cpc	r17, r1
    1010:	29 f4       	brne	.+10     	; 0x101c <pf_read+0xd0>
    1012:	68 a1       	ldd	r22, Y+32	; 0x20
    1014:	79 a1       	ldd	r23, Y+33	; 0x21
    1016:	8a a1       	ldd	r24, Y+34	; 0x22
    1018:	9b a1       	ldd	r25, Y+35	; 0x23
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <pf_read+0xda>
    101c:	6c a1       	ldd	r22, Y+36	; 0x24
    101e:	7d a1       	ldd	r23, Y+37	; 0x25
    1020:	8e a1       	ldd	r24, Y+38	; 0x26
    1022:	9f a1       	ldd	r25, Y+39	; 0x27
    1024:	2a da       	rcall	.-2988   	; 0x47a <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    1026:	62 30       	cpi	r22, 0x02	; 2
    1028:	71 05       	cpc	r23, r1
    102a:	81 05       	cpc	r24, r1
    102c:	91 05       	cpc	r25, r1
    102e:	08 f4       	brcc	.+2      	; 0x1032 <pf_read+0xe6>
    1030:	7f c0       	rjmp	.+254    	; 0x1130 <pf_read+0x1e4>
				fs->curr_clust = clst;				/* Update current cluster */
    1032:	6c a3       	std	Y+36, r22	; 0x24
    1034:	7d a3       	std	Y+37, r23	; 0x25
    1036:	8e a3       	std	Y+38, r24	; 0x26
    1038:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    103a:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    103c:	00 91 71 00 	lds	r16, 0x0071
    1040:	10 91 72 00 	lds	r17, 0x0072


	clst -= 2;
    1044:	2c a1       	ldd	r18, Y+36	; 0x24
    1046:	3d a1       	ldd	r19, Y+37	; 0x25
    1048:	4e a1       	ldd	r20, Y+38	; 0x26
    104a:	5f a1       	ldd	r21, Y+39	; 0x27
    104c:	22 50       	subi	r18, 0x02	; 2
    104e:	30 40       	sbci	r19, 0x00	; 0
    1050:	40 40       	sbci	r20, 0x00	; 0
    1052:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1054:	f8 01       	movw	r30, r16
    1056:	80 85       	ldd	r24, Z+8	; 0x08
    1058:	91 85       	ldd	r25, Z+9	; 0x09
    105a:	a2 85       	ldd	r26, Z+10	; 0x0a
    105c:	b3 85       	ldd	r27, Z+11	; 0x0b
    105e:	02 97       	sbiw	r24, 0x02	; 2
    1060:	a1 09       	sbc	r26, r1
    1062:	b1 09       	sbc	r27, r1
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	4a 07       	cpc	r20, r26
    106a:	5b 07       	cpc	r21, r27
    106c:	08 f0       	brcs	.+2      	; 0x1070 <pf_read+0x124>
    106e:	60 c0       	rjmp	.+192    	; 0x1130 <pf_read+0x1e4>
	return (DWORD)clst * fs->csize + fs->database;
    1070:	61 81       	ldd	r22, Z+1	; 0x01
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	df d4       	rcall	.+2494   	; 0x1a38 <__mulsi3>
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	f8 01       	movw	r30, r16
    1080:	84 89       	ldd	r24, Z+20	; 0x14
    1082:	95 89       	ldd	r25, Z+21	; 0x15
    1084:	a6 89       	ldd	r26, Z+22	; 0x16
    1086:	b7 89       	ldd	r27, Z+23	; 0x17
    1088:	28 0f       	add	r18, r24
    108a:	39 1f       	adc	r19, r25
    108c:	4a 1f       	adc	r20, r26
    108e:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	41 05       	cpc	r20, r1
    1096:	51 05       	cpc	r21, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <pf_read+0x150>
    109a:	4a c0       	rjmp	.+148    	; 0x1130 <pf_read+0x1e4>
			fs->dsect = sect + fs->csect++;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	28 0f       	add	r18, r24
    10a0:	31 1d       	adc	r19, r1
    10a2:	41 1d       	adc	r20, r1
    10a4:	51 1d       	adc	r21, r1
    10a6:	28 a7       	std	Y+40, r18	; 0x28
    10a8:	39 a7       	std	Y+41, r19	; 0x29
    10aa:	4a a7       	std	Y+42, r20	; 0x2a
    10ac:	5b a7       	std	Y+43, r21	; 0x2b
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	8b 83       	std	Y+3, r24	; 0x03
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    10b2:	08 8d       	ldd	r16, Y+24	; 0x18
    10b4:	19 8d       	ldd	r17, Y+25	; 0x19
    10b6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10b8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    10ba:	c8 01       	movw	r24, r16
    10bc:	91 70       	andi	r25, 0x01	; 1
    10be:	a2 01       	movw	r20, r4
    10c0:	48 1b       	sub	r20, r24
    10c2:	59 0b       	sbc	r21, r25
    10c4:	76 01       	movw	r14, r12
    10c6:	4c 15       	cp	r20, r12
    10c8:	5d 05       	cpc	r21, r13
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <pf_read+0x182>
    10cc:	7a 01       	movw	r14, r20
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    10ce:	61 14       	cp	r6, r1
    10d0:	71 04       	cpc	r7, r1
    10d2:	19 f4       	brne	.+6      	; 0x10da <pf_read+0x18e>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <pf_read+0x190>
    10da:	c5 01       	movw	r24, r10
    10dc:	48 a5       	ldd	r20, Y+40	; 0x28
    10de:	59 a5       	ldd	r21, Y+41	; 0x29
    10e0:	6a a5       	ldd	r22, Y+42	; 0x2a
    10e2:	7b a5       	ldd	r23, Y+43	; 0x2b
    10e4:	98 01       	movw	r18, r16
    10e6:	31 70       	andi	r19, 0x01	; 1
    10e8:	87 01       	movw	r16, r14
    10ea:	35 d3       	rcall	.+1642   	; 0x1756 <disk_readp>
		if (dr) goto fr_abort;
    10ec:	88 23       	and	r24, r24
    10ee:	01 f5       	brne	.+64     	; 0x1130 <pf_read+0x1e4>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    10f0:	c7 01       	movw	r24, r14
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	28 8d       	ldd	r18, Y+24	; 0x18
    10f8:	39 8d       	ldd	r19, Y+25	; 0x19
    10fa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    10fc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    10fe:	28 0f       	add	r18, r24
    1100:	39 1f       	adc	r19, r25
    1102:	4a 1f       	adc	r20, r26
    1104:	5b 1f       	adc	r21, r27
    1106:	28 8f       	std	Y+24, r18	; 0x18
    1108:	39 8f       	std	Y+25, r19	; 0x19
    110a:	4a 8f       	std	Y+26, r20	; 0x1a
    110c:	5b 8f       	std	Y+27, r21	; 0x1b
    110e:	ae 0c       	add	r10, r14
    1110:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1112:	ce 18       	sub	r12, r14
    1114:	df 08       	sbc	r13, r15
    1116:	f4 01       	movw	r30, r8
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	8e 0d       	add	r24, r14
    111e:	9f 1d       	adc	r25, r15
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1124:	c1 14       	cp	r12, r1
    1126:	d1 04       	cpc	r13, r1
    1128:	09 f0       	breq	.+2      	; 0x112c <pf_read+0x1e0>
    112a:	4d cf       	rjmp	.-358    	; 0xfc6 <pf_read+0x7a>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <pf_read+0x1e8>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    1130:	1a 82       	std	Y+2, r1	; 0x02
    1132:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	af 90       	pop	r10
    1148:	9f 90       	pop	r9
    114a:	8f 90       	pop	r8
    114c:	7f 90       	pop	r7
    114e:	6f 90       	pop	r6
    1150:	5f 90       	pop	r5
    1152:	4f 90       	pop	r4
    1154:	08 95       	ret

00001156 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	b8 2e       	mov	r11, r24
    116c:	a9 2e       	mov	r10, r25
    116e:	6a 01       	movw	r12, r20
    1170:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    1172:	2e ef       	ldi	r18, 0xFE	; 254
    1174:	31 e0       	ldi	r19, 0x01	; 1
    1176:	02 e0       	ldi	r16, 0x02	; 2
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	ed d2       	rcall	.+1498   	; 0x1756 <disk_readp>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <check_fs+0x2e>
    1180:	23 e0       	ldi	r18, 0x03	; 3
    1182:	31 c0       	rjmp	.+98     	; 0x11e6 <check_fs+0x90>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    1184:	cb 2d       	mov	r28, r11
    1186:	da 2d       	mov	r29, r10
    1188:	88 81       	ld	r24, Y
    118a:	99 81       	ldd	r25, Y+1	; 0x01
    118c:	85 55       	subi	r24, 0x55	; 85
    118e:	9a 4a       	sbci	r25, 0xAA	; 170
    1190:	11 f0       	breq	.+4      	; 0x1196 <check_fs+0x40>
    1192:	22 e0       	ldi	r18, 0x02	; 2
    1194:	28 c0       	rjmp	.+80     	; 0x11e6 <check_fs+0x90>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    1196:	8b 2d       	mov	r24, r11
    1198:	9a 2d       	mov	r25, r10
    119a:	b7 01       	movw	r22, r14
    119c:	a6 01       	movw	r20, r12
    119e:	26 e3       	ldi	r18, 0x36	; 54
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	02 e0       	ldi	r16, 0x02	; 2
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	d7 d2       	rcall	.+1454   	; 0x1756 <disk_readp>
    11a8:	88 23       	and	r24, r24
    11aa:	39 f4       	brne	.+14     	; 0x11ba <check_fs+0x64>
    11ac:	88 81       	ld	r24, Y
    11ae:	99 81       	ldd	r25, Y+1	; 0x01
    11b0:	86 54       	subi	r24, 0x46	; 70
    11b2:	91 44       	sbci	r25, 0x41	; 65
    11b4:	11 f4       	brne	.+4      	; 0x11ba <check_fs+0x64>
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	16 c0       	rjmp	.+44     	; 0x11e6 <check_fs+0x90>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    11ba:	8b 2d       	mov	r24, r11
    11bc:	9a 2d       	mov	r25, r10
    11be:	b7 01       	movw	r22, r14
    11c0:	a6 01       	movw	r20, r12
    11c2:	22 e5       	ldi	r18, 0x52	; 82
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	02 e0       	ldi	r16, 0x02	; 2
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	c5 d2       	rcall	.+1418   	; 0x1756 <disk_readp>
    11cc:	88 23       	and	r24, r24
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <check_fs+0x7e>
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <check_fs+0x90>
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	88 81       	ld	r24, Y
    11d8:	99 81       	ldd	r25, Y+1	; 0x01
    11da:	86 54       	subi	r24, 0x46	; 70
    11dc:	91 44       	sbci	r25, 0x41	; 65
    11de:	09 f4       	brne	.+2      	; 0x11e2 <check_fs+0x8c>
    11e0:	21 e0       	ldi	r18, 0x01	; 1
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	28 27       	eor	r18, r24
		return 0;
#endif
	return 1;
}
    11e6:	82 2f       	mov	r24, r18
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	08 95       	ret

000011fe <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    11fe:	4f 92       	push	r4
    1200:	5f 92       	push	r5
    1202:	6f 92       	push	r6
    1204:	7f 92       	push	r7
    1206:	8f 92       	push	r8
    1208:	9f 92       	push	r9
    120a:	af 92       	push	r10
    120c:	bf 92       	push	r11
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	fc 01       	movw	r30, r24
    1220:	5b 01       	movw	r10, r22
    1222:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	WORD wcnt;
	FATFS *fs = FatFs;
    1224:	c0 91 71 00 	lds	r28, 0x0071
    1228:	d0 91 72 00 	lds	r29, 0x0072


	*bw = 0;
    122c:	da 01       	movw	r26, r20
    122e:	1d 92       	st	X+, r1
    1230:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1232:	20 97       	sbiw	r28, 0x00	; 0
    1234:	11 f4       	brne	.+4      	; 0x123a <pf_write+0x3c>
    1236:	86 e0       	ldi	r24, 0x06	; 6
    1238:	01 c1       	rjmp	.+514    	; 0x143c <pf_write+0x23e>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	80 fd       	sbrc	r24, 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <pf_write+0x48>
    1242:	85 e0       	ldi	r24, 0x05	; 5
    1244:	fb c0       	rjmp	.+502    	; 0x143c <pf_write+0x23e>
    1246:	80 74       	andi	r24, 0x40	; 64
    1248:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    124a:	61 15       	cp	r22, r1
    124c:	71 05       	cpc	r23, r1
    124e:	81 f4       	brne	.+32     	; 0x1270 <pf_write+0x72>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    1250:	89 2b       	or	r24, r25
    1252:	51 f0       	breq	.+20     	; 0x1268 <pf_write+0x6a>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	cb d2       	rcall	.+1430   	; 0x17f8 <disk_writep>
    1262:	88 23       	and	r24, r24
    1264:	09 f0       	breq	.+2      	; 0x1268 <pf_write+0x6a>
    1266:	e8 c0       	rjmp	.+464    	; 0x1438 <pf_write+0x23a>
		fs->flag &= ~FA__WIP;
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	8f 7b       	andi	r24, 0xBF	; 191
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	e2 c0       	rjmp	.+452    	; 0x1434 <pf_write+0x236>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    1270:	89 2b       	or	r24, r25
    1272:	51 f4       	brne	.+20     	; 0x1288 <pf_write+0x8a>
			fs->fptr &= 0xFFFFFE00;
    1274:	88 8d       	ldd	r24, Y+24	; 0x18
    1276:	99 8d       	ldd	r25, Y+25	; 0x19
    1278:	aa 8d       	ldd	r26, Y+26	; 0x1a
    127a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    127c:	80 70       	andi	r24, 0x00	; 0
    127e:	9e 7f       	andi	r25, 0xFE	; 254
    1280:	88 8f       	std	Y+24, r24	; 0x18
    1282:	99 8f       	std	Y+25, r25	; 0x19
    1284:	aa 8f       	std	Y+26, r26	; 0x1a
    1286:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    1288:	2c 8d       	ldd	r18, Y+28	; 0x1c
    128a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    128c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    128e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1290:	88 8d       	ldd	r24, Y+24	; 0x18
    1292:	99 8d       	ldd	r25, Y+25	; 0x19
    1294:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1296:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1298:	28 1b       	sub	r18, r24
    129a:	39 0b       	sbc	r19, r25
    129c:	4a 0b       	sbc	r20, r26
    129e:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    12a0:	c5 01       	movw	r24, r10
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	28 17       	cp	r18, r24
    12a8:	39 07       	cpc	r19, r25
    12aa:	4a 07       	cpc	r20, r26
    12ac:	5b 07       	cpc	r21, r27
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <pf_write+0xb4>
    12b0:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    12b2:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + fs->csect++;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    12b4:	41 2c       	mov	r4, r1
    12b6:	b2 e0       	ldi	r27, 0x02	; 2
    12b8:	5b 2e       	mov	r5, r27
    12ba:	b8 c0       	rjmp	.+368    	; 0x142c <pf_write+0x22e>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    12bc:	e8 8c       	ldd	r14, Y+24	; 0x18
    12be:	f9 8c       	ldd	r15, Y+25	; 0x19
    12c0:	0a 8d       	ldd	r16, Y+26	; 0x1a
    12c2:	1b 8d       	ldd	r17, Y+27	; 0x1b
    12c4:	c7 01       	movw	r24, r14
    12c6:	91 70       	andi	r25, 0x01	; 1
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f0       	breq	.+2      	; 0x12ce <pf_write+0xd0>
    12cc:	73 c0       	rjmp	.+230    	; 0x13b4 <pf_write+0x1b6>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    12ce:	c8 01       	movw	r24, r16
    12d0:	b7 01       	movw	r22, r14
    12d2:	a9 e0       	ldi	r26, 0x09	; 9
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	77 95       	ror	r23
    12da:	67 95       	ror	r22
    12dc:	aa 95       	dec	r26
    12de:	d1 f7       	brne	.-12     	; 0x12d4 <pf_write+0xd6>
    12e0:	29 81       	ldd	r18, Y+1	; 0x01
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	c6 d3       	rcall	.+1932   	; 0x1a76 <__udivmodsi4>
    12ea:	61 15       	cp	r22, r1
    12ec:	71 05       	cpc	r23, r1
    12ee:	81 05       	cpc	r24, r1
    12f0:	91 05       	cpc	r25, r1
    12f2:	d1 f4       	brne	.+52     	; 0x1328 <pf_write+0x12a>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    12f4:	e1 14       	cp	r14, r1
    12f6:	f1 04       	cpc	r15, r1
    12f8:	01 05       	cpc	r16, r1
    12fa:	11 05       	cpc	r17, r1
    12fc:	29 f4       	brne	.+10     	; 0x1308 <pf_write+0x10a>
    12fe:	68 a1       	ldd	r22, Y+32	; 0x20
    1300:	79 a1       	ldd	r23, Y+33	; 0x21
    1302:	8a a1       	ldd	r24, Y+34	; 0x22
    1304:	9b a1       	ldd	r25, Y+35	; 0x23
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <pf_write+0x114>
    1308:	6c a1       	ldd	r22, Y+36	; 0x24
    130a:	7d a1       	ldd	r23, Y+37	; 0x25
    130c:	8e a1       	ldd	r24, Y+38	; 0x26
    130e:	9f a1       	ldd	r25, Y+39	; 0x27
    1310:	b4 d8       	rcall	.-3736   	; 0x47a <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    1312:	62 30       	cpi	r22, 0x02	; 2
    1314:	71 05       	cpc	r23, r1
    1316:	81 05       	cpc	r24, r1
    1318:	91 05       	cpc	r25, r1
    131a:	08 f4       	brcc	.+2      	; 0x131e <pf_write+0x120>
    131c:	8d c0       	rjmp	.+282    	; 0x1438 <pf_write+0x23a>
				fs->curr_clust = clst;				/* Update current cluster */
    131e:	6c a3       	std	Y+36, r22	; 0x24
    1320:	7d a3       	std	Y+37, r23	; 0x25
    1322:	8e a3       	std	Y+38, r24	; 0x26
    1324:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    1326:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1328:	00 91 71 00 	lds	r16, 0x0071
    132c:	10 91 72 00 	lds	r17, 0x0072


	clst -= 2;
    1330:	2c a1       	ldd	r18, Y+36	; 0x24
    1332:	3d a1       	ldd	r19, Y+37	; 0x25
    1334:	4e a1       	ldd	r20, Y+38	; 0x26
    1336:	5f a1       	ldd	r21, Y+39	; 0x27
    1338:	22 50       	subi	r18, 0x02	; 2
    133a:	30 40       	sbci	r19, 0x00	; 0
    133c:	40 40       	sbci	r20, 0x00	; 0
    133e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1340:	f8 01       	movw	r30, r16
    1342:	80 85       	ldd	r24, Z+8	; 0x08
    1344:	91 85       	ldd	r25, Z+9	; 0x09
    1346:	a2 85       	ldd	r26, Z+10	; 0x0a
    1348:	b3 85       	ldd	r27, Z+11	; 0x0b
    134a:	02 97       	sbiw	r24, 0x02	; 2
    134c:	a1 09       	sbc	r26, r1
    134e:	b1 09       	sbc	r27, r1
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	4a 07       	cpc	r20, r26
    1356:	5b 07       	cpc	r21, r27
    1358:	08 f0       	brcs	.+2      	; 0x135c <pf_write+0x15e>
    135a:	6e c0       	rjmp	.+220    	; 0x1438 <pf_write+0x23a>
	return (DWORD)clst * fs->csize + fs->database;
    135c:	61 81       	ldd	r22, Z+1	; 0x01
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	69 d3       	rcall	.+1746   	; 0x1a38 <__mulsi3>
    1366:	9b 01       	movw	r18, r22
    1368:	ac 01       	movw	r20, r24
    136a:	f8 01       	movw	r30, r16
    136c:	84 89       	ldd	r24, Z+20	; 0x14
    136e:	95 89       	ldd	r25, Z+21	; 0x15
    1370:	a6 89       	ldd	r26, Z+22	; 0x16
    1372:	b7 89       	ldd	r27, Z+23	; 0x17
    1374:	28 0f       	add	r18, r24
    1376:	39 1f       	adc	r19, r25
    1378:	4a 1f       	adc	r20, r26
    137a:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    137c:	21 15       	cp	r18, r1
    137e:	31 05       	cpc	r19, r1
    1380:	41 05       	cpc	r20, r1
    1382:	51 05       	cpc	r21, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <pf_write+0x18a>
    1386:	58 c0       	rjmp	.+176    	; 0x1438 <pf_write+0x23a>
			fs->dsect = sect + fs->csect++;
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	ba 01       	movw	r22, r20
    138c:	a9 01       	movw	r20, r18
    138e:	48 0f       	add	r20, r24
    1390:	51 1d       	adc	r21, r1
    1392:	61 1d       	adc	r22, r1
    1394:	71 1d       	adc	r23, r1
    1396:	48 a7       	std	Y+40, r20	; 0x28
    1398:	59 a7       	std	Y+41, r21	; 0x29
    139a:	6a a7       	std	Y+42, r22	; 0x2a
    139c:	7b a7       	std	Y+43, r23	; 0x2b
    139e:	8f 5f       	subi	r24, 0xFF	; 255
    13a0:	8b 83       	std	Y+3, r24	; 0x03
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	28 d2       	rcall	.+1104   	; 0x17f8 <disk_writep>
    13a8:	88 23       	and	r24, r24
    13aa:	09 f0       	breq	.+2      	; 0x13ae <pf_write+0x1b0>
    13ac:	45 c0       	rjmp	.+138    	; 0x1438 <pf_write+0x23a>
			fs->flag |= FA__WIP;
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	8a 83       	std	Y+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    13b4:	88 8d       	ldd	r24, Y+24	; 0x18
    13b6:	99 8d       	ldd	r25, Y+25	; 0x19
    13b8:	91 70       	andi	r25, 0x01	; 1
    13ba:	92 01       	movw	r18, r4
    13bc:	28 1b       	sub	r18, r24
    13be:	39 0b       	sbc	r19, r25
    13c0:	65 01       	movw	r12, r10
    13c2:	2a 15       	cp	r18, r10
    13c4:	3b 05       	cpc	r19, r11
    13c6:	08 f4       	brcc	.+2      	; 0x13ca <pf_write+0x1cc>
    13c8:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    13ca:	76 01       	movw	r14, r12
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	c4 01       	movw	r24, r8
    13d2:	b8 01       	movw	r22, r16
    13d4:	a7 01       	movw	r20, r14
    13d6:	10 d2       	rcall	.+1056   	; 0x17f8 <disk_writep>
    13d8:	88 23       	and	r24, r24
    13da:	71 f5       	brne	.+92     	; 0x1438 <pf_write+0x23a>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    13dc:	88 8d       	ldd	r24, Y+24	; 0x18
    13de:	99 8d       	ldd	r25, Y+25	; 0x19
    13e0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    13e2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    13e4:	8e 0d       	add	r24, r14
    13e6:	9f 1d       	adc	r25, r15
    13e8:	a0 1f       	adc	r26, r16
    13ea:	b1 1f       	adc	r27, r17
    13ec:	9c 01       	movw	r18, r24
    13ee:	88 8f       	std	Y+24, r24	; 0x18
    13f0:	99 8f       	std	Y+25, r25	; 0x19
    13f2:	aa 8f       	std	Y+26, r26	; 0x1a
    13f4:	bb 8f       	std	Y+27, r27	; 0x1b
		btw -= wcnt; *bw += wcnt;
    13f6:	d3 01       	movw	r26, r6
    13f8:	8d 91       	ld	r24, X+
    13fa:	9c 91       	ld	r25, X
    13fc:	11 97       	sbiw	r26, 0x01	; 1
    13fe:	8c 0d       	add	r24, r12
    1400:	9d 1d       	adc	r25, r13
    1402:	8d 93       	st	X+, r24
    1404:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    1406:	31 70       	andi	r19, 0x01	; 1
    1408:	23 2b       	or	r18, r19
    140a:	61 f4       	brne	.+24     	; 0x1424 <pf_write+0x226>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	ef d1       	rcall	.+990    	; 0x17f8 <disk_writep>
    141a:	88 23       	and	r24, r24
    141c:	69 f4       	brne	.+26     	; 0x1438 <pf_write+0x23a>
			fs->flag &= ~FA__WIP;
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	8a 83       	std	Y+2, r24	; 0x02
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1424:	8c 0c       	add	r8, r12
    1426:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    1428:	ac 18       	sub	r10, r12
    142a:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    142c:	a1 14       	cp	r10, r1
    142e:	b1 04       	cpc	r11, r1
    1430:	09 f0       	breq	.+2      	; 0x1434 <pf_write+0x236>
    1432:	44 cf       	rjmp	.-376    	; 0x12bc <pf_write+0xbe>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <pf_write+0x23e>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    1438:	1a 82       	std	Y+2, r1	; 0x02
    143a:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	bf 90       	pop	r11
    144e:	af 90       	pop	r10
    1450:	9f 90       	pop	r9
    1452:	8f 90       	pop	r8
    1454:	7f 90       	pop	r7
    1456:	6f 90       	pop	r6
    1458:	5f 90       	pop	r5
    145a:	4f 90       	pop	r4
    145c:	08 95       	ret

0000145e <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    145e:	6f 92       	push	r6
    1460:	7f 92       	push	r7
    1462:	8f 92       	push	r8
    1464:	9f 92       	push	r9
    1466:	af 92       	push	r10
    1468:	bf 92       	push	r11
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	a4 97       	sbiw	r28, 0x24	; 36
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    148c:	10 92 72 00 	sts	0x0072, r1
    1490:	10 92 71 00 	sts	0x0071, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	09 f4       	brne	.+2      	; 0x149a <pf_mount+0x3c>
    1498:	e6 c0       	rjmp	.+460    	; 0x1666 <pf_mount+0x208>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    149a:	20 d2       	rcall	.+1088   	; 0x18dc <disk_initialize>
    149c:	80 ff       	sbrs	r24, 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <pf_mount+0x46>
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	e6 c0       	rjmp	.+460    	; 0x1670 <pf_mount+0x212>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    14a4:	4e 01       	movw	r8, r28
    14a6:	08 94       	sec
    14a8:	81 1c       	adc	r8, r1
    14aa:	91 1c       	adc	r9, r1
    14ac:	c4 01       	movw	r24, r8
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	4f de       	rcall	.-866    	; 0x1156 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <pf_mount+0x66>
    14bc:	cc 24       	eor	r12, r12
    14be:	dd 24       	eor	r13, r13
    14c0:	76 01       	movw	r14, r12
    14c2:	19 c0       	rjmp	.+50     	; 0x14f6 <pf_mount+0x98>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    14c4:	c4 01       	movw	r24, r8
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	2e eb       	ldi	r18, 0xBE	; 190
    14d0:	31 e0       	ldi	r19, 0x01	; 1
    14d2:	00 e1       	ldi	r16, 0x10	; 16
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	3f d1       	rcall	.+638    	; 0x1756 <disk_readp>
    14d8:	88 23       	and	r24, r24
    14da:	09 f0       	breq	.+2      	; 0x14de <pf_mount+0x80>
    14dc:	c6 c0       	rjmp	.+396    	; 0x166a <pf_mount+0x20c>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	88 23       	and	r24, r24
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <pf_mount+0x88>
    14e4:	c4 c0       	rjmp	.+392    	; 0x166e <pf_mount+0x210>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    14e6:	c9 84       	ldd	r12, Y+9	; 0x09
    14e8:	da 84       	ldd	r13, Y+10	; 0x0a
    14ea:	eb 84       	ldd	r14, Y+11	; 0x0b
    14ec:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    14ee:	c4 01       	movw	r24, r8
    14f0:	b7 01       	movw	r22, r14
    14f2:	a6 01       	movw	r20, r12
    14f4:	30 de       	rcall	.-928    	; 0x1156 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	09 f4       	brne	.+2      	; 0x14fc <pf_mount+0x9e>
    14fa:	b7 c0       	rjmp	.+366    	; 0x166a <pf_mount+0x20c>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    14fc:	88 23       	and	r24, r24
    14fe:	09 f0       	breq	.+2      	; 0x1502 <pf_mount+0xa4>
    1500:	b6 c0       	rjmp	.+364    	; 0x166e <pf_mount+0x210>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	b7 01       	movw	r22, r14
    1508:	a6 01       	movw	r20, r12
    150a:	2d e0       	ldi	r18, 0x0D	; 13
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	04 e2       	ldi	r16, 0x24	; 36
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	21 d1       	rcall	.+578    	; 0x1756 <disk_readp>
    1514:	88 23       	and	r24, r24
    1516:	09 f0       	breq	.+2      	; 0x151a <pf_mount+0xbc>
    1518:	a8 c0       	rjmp	.+336    	; 0x166a <pf_mount+0x20c>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    151a:	8a 85       	ldd	r24, Y+10	; 0x0a
    151c:	9b 85       	ldd	r25, Y+11	; 0x0b
    151e:	bc 01       	movw	r22, r24
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    1524:	61 15       	cp	r22, r1
    1526:	71 05       	cpc	r23, r1
    1528:	81 05       	cpc	r24, r1
    152a:	91 05       	cpc	r25, r1
    152c:	21 f4       	brne	.+8      	; 0x1536 <pf_mount+0xd8>
    152e:	68 8d       	ldd	r22, Y+24	; 0x18
    1530:	79 8d       	ldd	r23, Y+25	; 0x19
    1532:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1534:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	7c d2       	rcall	.+1272   	; 0x1a38 <__mulsi3>
    1540:	3b 01       	movw	r6, r22
    1542:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	c8 0e       	add	r12, r24
    154e:	d9 1e       	adc	r13, r25
    1550:	ea 1e       	adc	r14, r26
    1552:	fb 1e       	adc	r15, r27
    1554:	f5 01       	movw	r30, r10
    1556:	c4 86       	std	Z+12, r12	; 0x0c
    1558:	d5 86       	std	Z+13, r13	; 0x0d
    155a:	e6 86       	std	Z+14, r14	; 0x0e
    155c:	f7 86       	std	Z+15, r15	; 0x0f
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	81 83       	std	Z+1, r24	; 0x01
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    1562:	2d 81       	ldd	r18, Y+5	; 0x05
    1564:	3e 81       	ldd	r19, Y+6	; 0x06
    1566:	35 83       	std	Z+5, r19	; 0x05
    1568:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	7c 01       	movw	r14, r24
    1570:	00 e0       	ldi	r16, 0x00	; 0
    1572:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    1574:	e1 14       	cp	r14, r1
    1576:	f1 04       	cpc	r15, r1
    1578:	01 05       	cpc	r16, r1
    157a:	11 05       	cpc	r17, r1
    157c:	21 f4       	brne	.+8      	; 0x1586 <pf_mount+0x128>
    157e:	ec 88       	ldd	r14, Y+20	; 0x14
    1580:	fd 88       	ldd	r15, Y+21	; 0x15
    1582:	0e 89       	ldd	r16, Y+22	; 0x16
    1584:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e8 1a       	sub	r14, r24
    1590:	f9 0a       	sbc	r15, r25
    1592:	0a 0b       	sbc	r16, r26
    1594:	1b 0b       	sbc	r17, r27
    1596:	e6 18       	sub	r14, r6
    1598:	f7 08       	sbc	r15, r7
    159a:	08 09       	sbc	r16, r8
    159c:	19 09       	sbc	r17, r9
    159e:	84 e0       	ldi	r24, 0x04	; 4
    15a0:	36 95       	lsr	r19
    15a2:	27 95       	ror	r18
    15a4:	8a 95       	dec	r24
    15a6:	e1 f7       	brne	.-8      	; 0x15a0 <pf_mount+0x142>
    15a8:	c9 01       	movw	r24, r18
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e8 1a       	sub	r14, r24
    15b0:	f9 0a       	sbc	r15, r25
    15b2:	0a 0b       	sbc	r16, r26
    15b4:	1b 0b       	sbc	r17, r27
    15b6:	f5 01       	movw	r30, r10
    15b8:	21 81       	ldd	r18, Z+1	; 0x01
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	c8 01       	movw	r24, r16
    15c2:	b7 01       	movw	r22, r14
    15c4:	58 d2       	rcall	.+1200   	; 0x1a76 <__udivmodsi4>
    15c6:	2e 5f       	subi	r18, 0xFE	; 254
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	4f 4f       	sbci	r20, 0xFF	; 255
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    15ce:	f5 01       	movw	r30, r10
    15d0:	20 87       	std	Z+8, r18	; 0x08
    15d2:	31 87       	std	Z+9, r19	; 0x09
    15d4:	42 87       	std	Z+10, r20	; 0x0a
    15d6:	53 87       	std	Z+11, r21	; 0x0b

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    15d8:	27 3f       	cpi	r18, 0xF7	; 247
    15da:	ff e0       	ldi	r31, 0x0F	; 15
    15dc:	3f 07       	cpc	r19, r31
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	4f 07       	cpc	r20, r31
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	5f 07       	cpc	r21, r31
    15e6:	10 f4       	brcc	.+4      	; 0x15ec <pf_mount+0x18e>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	08 c0       	rjmp	.+16     	; 0x15fc <pf_mount+0x19e>
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    15ec:	27 5f       	subi	r18, 0xF7	; 247
    15ee:	3f 4f       	sbci	r19, 0xFF	; 255
    15f0:	40 40       	sbci	r20, 0x00	; 0
    15f2:	50 40       	sbci	r21, 0x00	; 0
    15f4:	10 f0       	brcs	.+4      	; 0x15fa <pf_mount+0x19c>
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <pf_mount+0x19e>
    15fa:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    15fc:	f5 01       	movw	r30, r10
    15fe:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	29 f4       	brne	.+10     	; 0x160e <pf_mount+0x1b0>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1604:	88 a1       	ldd	r24, Y+32	; 0x20
    1606:	99 a1       	ldd	r25, Y+33	; 0x21
    1608:	aa a1       	ldd	r26, Y+34	; 0x22
    160a:	bb a1       	ldd	r27, Y+35	; 0x23
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <pf_mount+0x1c2>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    160e:	f5 01       	movw	r30, r10
    1610:	84 85       	ldd	r24, Z+12	; 0x0c
    1612:	95 85       	ldd	r25, Z+13	; 0x0d
    1614:	a6 85       	ldd	r26, Z+14	; 0x0e
    1616:	b7 85       	ldd	r27, Z+15	; 0x0f
    1618:	86 0d       	add	r24, r6
    161a:	97 1d       	adc	r25, r7
    161c:	a8 1d       	adc	r26, r8
    161e:	b9 1d       	adc	r27, r9
    1620:	80 8b       	std	Z+16, r24	; 0x10
    1622:	91 8b       	std	Z+17, r25	; 0x11
    1624:	a2 8b       	std	Z+18, r26	; 0x12
    1626:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1628:	f5 01       	movw	r30, r10
    162a:	84 81       	ldd	r24, Z+4	; 0x04
    162c:	95 81       	ldd	r25, Z+5	; 0x05
    162e:	14 e0       	ldi	r17, 0x04	; 4
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	1a 95       	dec	r17
    1636:	e1 f7       	brne	.-8      	; 0x1630 <pf_mount+0x1d2>
    1638:	a0 e0       	ldi	r26, 0x00	; 0
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	24 85       	ldd	r18, Z+12	; 0x0c
    163e:	35 85       	ldd	r19, Z+13	; 0x0d
    1640:	46 85       	ldd	r20, Z+14	; 0x0e
    1642:	57 85       	ldd	r21, Z+15	; 0x0f
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	a4 1f       	adc	r26, r20
    164a:	b5 1f       	adc	r27, r21
    164c:	86 0d       	add	r24, r6
    164e:	97 1d       	adc	r25, r7
    1650:	a8 1d       	adc	r26, r8
    1652:	b9 1d       	adc	r27, r9
    1654:	84 8b       	std	Z+20, r24	; 0x14
    1656:	95 8b       	std	Z+21, r25	; 0x15
    1658:	a6 8b       	std	Z+22, r26	; 0x16
    165a:	b7 8b       	std	Z+23, r27	; 0x17

	fs->flag = 0;
    165c:	12 82       	std	Z+2, r1	; 0x02
	FatFs = fs;
    165e:	b0 92 72 00 	sts	0x0072, r11
    1662:	a0 92 71 00 	sts	0x0071, r10
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <pf_mount+0x212>

	return FR_OK;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <pf_mount+0x212>
    166e:	87 e0       	ldi	r24, 0x07	; 7
}
    1670:	a4 96       	adiw	r28, 0x24	; 36
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	08 95       	ret

0000169a <xmit_spi>:

//-----------------------------------------------------------------------
// SPI functions
//-----------------------------------------------------------------------
void xmit_spi (BYTE data)		// Send a byte 
{ BYTE i;
    169a:	90 e0       	ldi	r25, 0x00	; 0

 for (i=0;i<8;i++)
  {
   if ((data&0x80)==0x00) PORTB&=~_BV(SD_DI);
    169c:	87 fd       	sbrc	r24, 7
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <xmit_spi+0xa>
    16a0:	c0 98       	cbi	0x18, 0	; 24
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <xmit_spi+0xc>
                     else PORTB|=_BV(SD_DI);
    16a4:	c0 9a       	sbi	0x18, 0	; 24
   data=data<<1; 
   PORTB|=_BV(SD_CLK);
    16a6:	c2 9a       	sbi	0x18, 2	; 24
   asm("nop"); 
    16a8:	00 00       	nop
   PORTB&=~_BV(SD_CLK);
    16aa:	c2 98       	cbi	0x18, 2	; 24
// SPI functions
//-----------------------------------------------------------------------
void xmit_spi (BYTE data)		// Send a byte 
{ BYTE i;

 for (i=0;i<8;i++)
    16ac:	9f 5f       	subi	r25, 0xFF	; 255
    16ae:	98 30       	cpi	r25, 0x08	; 8
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <xmit_spi+0x1c>
  {
   if ((data&0x80)==0x00) PORTB&=~_BV(SD_DI);
                     else PORTB|=_BV(SD_DI);
   data=data<<1; 
    16b2:	88 0f       	add	r24, r24
    16b4:	f3 cf       	rjmp	.-26     	; 0x169c <xmit_spi+0x2>
    16b6:	08 95       	ret

000016b8 <rcv_spi>:
}

BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;

 PORTB|=_BV(SD_DI);
    16b8:	c0 9a       	sbi	0x18, 0	; 24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0

 for (i=0;i<8;i++)
  {
   PORTB|=_BV(SD_CLK);
    16be:	c2 9a       	sbi	0x18, 2	; 24
   res=res<<1;
    16c0:	88 0f       	add	r24, r24
   if ((PINB&_BV(SD_DO))!=0x00) res=res|0x01;
    16c2:	b1 99       	sbic	0x16, 1	; 22
    16c4:	81 60       	ori	r24, 0x01	; 1
   PORTB&=~_BV(SD_CLK);
    16c6:	c2 98       	cbi	0x18, 2	; 24
   asm("nop");
    16c8:	00 00       	nop
BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;

 PORTB|=_BV(SD_DI);

 for (i=0;i<8;i++)
    16ca:	9f 5f       	subi	r25, 0xFF	; 255
    16cc:	98 30       	cpi	r25, 0x08	; 8
    16ce:	b9 f7       	brne	.-18     	; 0x16be <rcv_spi+0x6>
   if ((PINB&_BV(SD_DO))!=0x00) res=res|0x01;
   PORTB&=~_BV(SD_CLK);
   asm("nop");
  }
 return res;
}	/* Send 0xFF and receive a byte */
    16d0:	08 95       	ret

000016d2 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		// Command byte 
	DWORD arg		// Argument 
)
{
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	d8 2e       	mov	r13, r24
    16de:	7a 01       	movw	r14, r20
    16e0:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	// ACMD<n> is the command sequense of CMD55-CMD<n> 
    16e2:	87 ff       	sbrs	r24, 7
    16e4:	0a c0       	rjmp	.+20     	; 0x16fa <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    16e6:	87 e7       	ldi	r24, 0x77	; 119
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	f0 df       	rcall	.-32     	; 0x16d2 <send_cmd>
		if (res > 1) return res;
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	50 f5       	brcc	.+84     	; 0x174a <send_cmd+0x78>
{
	BYTE n, res;


	if (cmd & 0x80) {	// ACMD<n> is the command sequense of CMD55-CMD<n> 
		cmd &= 0x7F;
    16f6:	8f e7       	ldi	r24, 0x7F	; 127
    16f8:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	// Select the card 
	DESELECT();
    16fa:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    16fc:	dd df       	rcall	.-70     	; 0x16b8 <rcv_spi>
	SELECT();
    16fe:	c3 98       	cbi	0x18, 3	; 24
	rcv_spi();
    1700:	db df       	rcall	.-74     	; 0x16b8 <rcv_spi>

	// Send a command packet 
	xmit_spi(cmd);						// Start + Command index 
    1702:	8d 2d       	mov	r24, r13
    1704:	ca df       	rcall	.-108    	; 0x169a <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		// Argument[31..24] 
    1706:	81 2f       	mov	r24, r17
    1708:	99 27       	eor	r25, r25
    170a:	aa 27       	eor	r26, r26
    170c:	bb 27       	eor	r27, r27
    170e:	c5 df       	rcall	.-118    	; 0x169a <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		// Argument[23..16] 
    1710:	c8 01       	movw	r24, r16
    1712:	aa 27       	eor	r26, r26
    1714:	bb 27       	eor	r27, r27
    1716:	c1 df       	rcall	.-126    	; 0x169a <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			// Argument[15..8] 
    1718:	bb 27       	eor	r27, r27
    171a:	a1 2f       	mov	r26, r17
    171c:	90 2f       	mov	r25, r16
    171e:	8f 2d       	mov	r24, r15
    1720:	bc df       	rcall	.-136    	; 0x169a <xmit_spi>
	xmit_spi((BYTE)arg);				// Argument[7..0] 
    1722:	8e 2d       	mov	r24, r14
    1724:	ba df       	rcall	.-140    	; 0x169a <xmit_spi>
	n = 0x01;							// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;			// Valid CRC for CMD0(0) 
    1726:	80 e4       	ldi	r24, 0x40	; 64
    1728:	d8 16       	cp	r13, r24
    172a:	11 f4       	brne	.+4      	; 0x1730 <send_cmd+0x5e>
    172c:	85 e9       	ldi	r24, 0x95	; 149
    172e:	06 c0       	rjmp	.+12     	; 0x173c <send_cmd+0x6a>
	if (cmd == CMD8) n = 0x87;			// Valid CRC for CMD8(0x1AA) 
    1730:	88 e4       	ldi	r24, 0x48	; 72
    1732:	d8 16       	cp	r13, r24
    1734:	11 f4       	brne	.+4      	; 0x173a <send_cmd+0x68>
    1736:	87 e8       	ldi	r24, 0x87	; 135
    1738:	01 c0       	rjmp	.+2      	; 0x173c <send_cmd+0x6a>
    173a:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    173c:	ae df       	rcall	.-164    	; 0x169a <xmit_spi>
    173e:	1a e0       	ldi	r17, 0x0A	; 10

	// Receive a command response 
	n = 10;								// Wait for a valid response in timeout of 10 attempts 
	do {
		res = rcv_spi();
    1740:	bb df       	rcall	.-138    	; 0x16b8 <rcv_spi>
	} while ((res & 0x80) && --n);
    1742:	87 ff       	sbrs	r24, 7
    1744:	02 c0       	rjmp	.+4      	; 0x174a <send_cmd+0x78>
    1746:	11 50       	subi	r17, 0x01	; 1
    1748:	d9 f7       	brne	.-10     	; 0x1740 <send_cmd+0x6e>

	return res;			// Return with the response value 
}
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	08 95       	ret

00001756 <disk_readp>:
	BYTE *buff,		// Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) 
	DWORD lba,		// Sector number (LBA) 
	WORD ofs,		// Byte offset to read from (0..511) 
	WORD cnt		// Number of bytes to read (ofs + cnt mus be <= 512) 
)
{
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	6c 01       	movw	r12, r24
    1768:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD bc;

	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
    176a:	b4 9b       	sbis	0x16, 4	; 22
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <disk_readp+0x1c>
    176e:	11 e0       	ldi	r17, 0x01	; 1
    1770:	39 c0       	rjmp	.+114    	; 0x17e4 <disk_readp+0x8e>

	if (!(CardType & CT_BLOCK)) lba *= 512;		// Convert to byte address if needed 
    1772:	80 91 75 00 	lds	r24, 0x0075
    1776:	83 fd       	sbrc	r24, 3
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <disk_readp+0x32>
    177a:	39 e0       	ldi	r19, 0x09	; 9
    177c:	44 0f       	add	r20, r20
    177e:	55 1f       	adc	r21, r21
    1780:	66 1f       	adc	r22, r22
    1782:	77 1f       	adc	r23, r23
    1784:	3a 95       	dec	r19
    1786:	d1 f7       	brne	.-12     	; 0x177c <disk_readp+0x26>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		// READ_SINGLE_BLOCK 
    1788:	81 e5       	ldi	r24, 0x51	; 81
    178a:	a3 df       	rcall	.-186    	; 0x16d2 <send_cmd>
    178c:	88 23       	and	r24, r24
    178e:	41 f5       	brne	.+80     	; 0x17e0 <disk_readp+0x8a>
    1790:	c0 e3       	ldi	r28, 0x30	; 48
    1792:	d5 e7       	ldi	r29, 0x75	; 117

		bc = 30000;
		do {							// Wait for data packet in timeout of 100ms 
			rc = rcv_spi();
    1794:	91 df       	rcall	.-222    	; 0x16b8 <rcv_spi>
		} while (rc == 0xFF && --bc);
    1796:	8f 3f       	cpi	r24, 0xFF	; 255
    1798:	19 f4       	brne	.+6      	; 0x17a0 <disk_readp+0x4a>
    179a:	21 97       	sbiw	r28, 0x01	; 1
    179c:	d9 f7       	brne	.-10     	; 0x1794 <disk_readp+0x3e>
    179e:	20 c0       	rjmp	.+64     	; 0x17e0 <disk_readp+0x8a>

		if (rc == 0xFE) {				// A data packet arrived 
    17a0:	8e 3f       	cpi	r24, 0xFE	; 254
    17a2:	f1 f4       	brne	.+60     	; 0x17e0 <disk_readp+0x8a>
			bc = 514 - ofs - cnt;

			// Skip leading bytes 
			if (ofs) {
    17a4:	e1 14       	cp	r14, r1
    17a6:	f1 04       	cpc	r15, r1
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <disk_readp+0x5c>
    17aa:	e7 01       	movw	r28, r14
				do rcv_spi(); while (--ofs);
    17ac:	85 df       	rcall	.-246    	; 0x16b8 <rcv_spi>
    17ae:	21 97       	sbiw	r28, 0x01	; 1
    17b0:	e9 f7       	brne	.-6      	; 0x17ac <disk_readp+0x56>
			}

			// Receive a part of the sector 
			if (buff) {	// Store data to the memory 
    17b2:	c1 14       	cp	r12, r1
    17b4:	d1 04       	cpc	r13, r1
    17b6:	39 f0       	breq	.+14     	; 0x17c6 <disk_readp+0x70>
    17b8:	e8 01       	movw	r28, r16
				do
					*buff++ = rcv_spi();
    17ba:	7e df       	rcall	.-260    	; 0x16b8 <rcv_spi>
    17bc:	f6 01       	movw	r30, r12
    17be:	81 93       	st	Z+, r24
    17c0:	6f 01       	movw	r12, r30
				while (--cnt);
    17c2:	21 97       	sbiw	r28, 0x01	; 1
    17c4:	d1 f7       	brne	.-12     	; 0x17ba <disk_readp+0x64>
		do {							// Wait for data packet in timeout of 100ms 
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				// A data packet arrived 
			bc = 514 - ofs - cnt;
    17c6:	cc 27       	eor	r28, r28
    17c8:	dd 27       	eor	r29, r29
    17ca:	ce 19       	sub	r28, r14
    17cc:	df 09       	sbc	r29, r15
    17ce:	ce 5f       	subi	r28, 0xFE	; 254
    17d0:	dd 4f       	sbci	r29, 0xFD	; 253
    17d2:	c0 1b       	sub	r28, r16
    17d4:	d1 0b       	sbc	r29, r17
                ;//uart_transmit(rcv_spi());		// (Console output) 
				while (--cnt);
			}

			// Skip trailing bytes and CRC 
			do rcv_spi(); while (--bc);
    17d6:	70 df       	rcall	.-288    	; 0x16b8 <rcv_spi>
    17d8:	21 97       	sbiw	r28, 0x01	; 1
    17da:	e9 f7       	brne	.-6      	; 0x17d6 <disk_readp+0x80>
    17dc:	10 e0       	ldi	r17, 0x00	; 0
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <disk_readp+0x8c>
    17e0:	11 e0       	ldi	r17, 0x01	; 1
// Deselect the card and release SPI bus                                 
//-----------------------------------------------------------------------
static
void release_spi (void)
{
	rcv_spi();
    17e2:	6a df       	rcall	.-300    	; 0x16b8 <rcv_spi>
	}

	release_spi();

	return res;
}
    17e4:	81 2f       	mov	r24, r17
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	08 95       	ret

000017f8 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	// Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) 
	DWORD sa			// Number of bytes to send, Sector number (LBA) or zero 
)
{
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	7c 01       	movw	r14, r24
	DRESULT res;
	WORD bc;
	static WORD wc;

	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
    1806:	b4 99       	sbic	0x16, 4	; 22
    1808:	60 c0       	rjmp	.+192    	; 0x18ca <disk_writep+0xd2>
	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;
    180a:	b5 99       	sbic	0x16, 5	; 22
    180c:	5e c0       	rjmp	.+188    	; 0x18ca <disk_writep+0xd2>

	res = RES_ERROR;

	if (buff) {		// Send data bytes 
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	e1 f0       	breq	.+56     	; 0x184a <disk_writep+0x52>
		bc = (WORD)sa;
    1812:	8a 01       	movw	r16, r20
    1814:	c0 91 73 00 	lds	r28, 0x0073
    1818:	d0 91 74 00 	lds	r29, 0x0074
    181c:	07 c0       	rjmp	.+14     	; 0x182c <disk_writep+0x34>
		while (bc && wc) {		// Send data bytes to the card 
			xmit_spi(*buff++);
    181e:	f7 01       	movw	r30, r14
    1820:	81 91       	ld	r24, Z+
    1822:	7f 01       	movw	r14, r30
    1824:	3a df       	rcall	.-396    	; 0x169a <xmit_spi>
			wc--; bc--;
    1826:	01 50       	subi	r16, 0x01	; 1
    1828:	10 40       	sbci	r17, 0x00	; 0
    182a:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		// Send data bytes 
		bc = (WORD)sa;
		while (bc && wc) {		// Send data bytes to the card 
    182c:	01 15       	cp	r16, r1
    182e:	11 05       	cpc	r17, r1
    1830:	29 f4       	brne	.+10     	; 0x183c <disk_writep+0x44>
    1832:	d0 93 74 00 	sts	0x0074, r29
    1836:	c0 93 73 00 	sts	0x0073, r28
    183a:	25 c0       	rjmp	.+74     	; 0x1886 <disk_writep+0x8e>
    183c:	20 97       	sbiw	r28, 0x00	; 0
    183e:	79 f7       	brne	.-34     	; 0x181e <disk_writep+0x26>
    1840:	10 92 74 00 	sts	0x0074, r1
    1844:	10 92 73 00 	sts	0x0073, r1
    1848:	1e c0       	rjmp	.+60     	; 0x1886 <disk_writep+0x8e>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	// Initiate sector write process 
    184a:	41 15       	cp	r20, r1
    184c:	51 05       	cpc	r21, r1
    184e:	61 05       	cpc	r22, r1
    1850:	71 05       	cpc	r23, r1
    1852:	d9 f0       	breq	.+54     	; 0x188a <disk_writep+0x92>
			if (!(CardType & CT_BLOCK)) sa *= 512;	// Convert to byte address if needed 
    1854:	80 91 75 00 	lds	r24, 0x0075
    1858:	83 fd       	sbrc	r24, 3
    185a:	07 c0       	rjmp	.+14     	; 0x186a <disk_writep+0x72>
    185c:	e9 e0       	ldi	r30, 0x09	; 9
    185e:	44 0f       	add	r20, r20
    1860:	55 1f       	adc	r21, r21
    1862:	66 1f       	adc	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	ea 95       	dec	r30
    1868:	d1 f7       	brne	.-12     	; 0x185e <disk_writep+0x66>
			if (send_cmd(CMD24, sa) == 0) {			// WRITE_SINGLE_BLOCK 
    186a:	88 e5       	ldi	r24, 0x58	; 88
    186c:	32 df       	rcall	.-412    	; 0x16d2 <send_cmd>
    186e:	88 23       	and	r24, r24
    1870:	61 f5       	brne	.+88     	; 0x18ca <disk_writep+0xd2>
				xmit_spi(0xFF); xmit_spi(0xFE);		// Data block header 
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	12 df       	rcall	.-476    	; 0x169a <xmit_spi>
    1876:	8e ef       	ldi	r24, 0xFE	; 254
    1878:	10 df       	rcall	.-480    	; 0x169a <xmit_spi>
				wc = 512;							// Set byte counter 
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	90 93 74 00 	sts	0x0074, r25
    1882:	80 93 73 00 	sts	0x0073, r24
    1886:	10 e0       	ldi	r17, 0x00	; 0
    1888:	21 c0       	rjmp	.+66     	; 0x18cc <disk_writep+0xd4>
				res = RES_OK;
			}
		} else {	// Finalize sector write process 
			bc = wc + 2;
    188a:	c0 91 73 00 	lds	r28, 0x0073
    188e:	d0 91 74 00 	lds	r29, 0x0074
    1892:	22 96       	adiw	r28, 0x02	; 2
    1894:	03 c0       	rjmp	.+6      	; 0x189c <disk_writep+0xa4>
			while (bc--) xmit_spi(0);	// Fill left bytes and CRC with zeros 
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	00 df       	rcall	.-512    	; 0x169a <xmit_spi>
    189a:	21 97       	sbiw	r28, 0x01	; 1
    189c:	20 97       	sbiw	r28, 0x00	; 0
    189e:	d9 f7       	brne	.-10     	; 0x1896 <disk_writep+0x9e>
			if ((rcv_spi() & 0x1F) == 0x05) {	// Receive data resp and wait for end of write process in timeout of 300ms 
    18a0:	0b df       	rcall	.-490    	; 0x16b8 <rcv_spi>
    18a2:	8f 71       	andi	r24, 0x1F	; 31
    18a4:	85 30       	cpi	r24, 0x05	; 5
    18a6:	71 f4       	brne	.+28     	; 0x18c4 <disk_writep+0xcc>
    18a8:	c8 ee       	ldi	r28, 0xE8	; 232
    18aa:	dd ef       	ldi	r29, 0xFD	; 253
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <disk_writep+0xb8>
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	// Wait ready 
    18ae:	21 97       	sbiw	r28, 0x01	; 1
    18b0:	03 df       	rcall	.-506    	; 0x16b8 <rcv_spi>
    18b2:	8f 3f       	cpi	r24, 0xFF	; 255
    18b4:	19 f0       	breq	.+6      	; 0x18bc <disk_writep+0xc4>
    18b6:	20 97       	sbiw	r28, 0x00	; 0
    18b8:	d1 f7       	brne	.-12     	; 0x18ae <disk_writep+0xb6>
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <disk_writep+0xcc>
				if (bc) res = RES_OK;
    18bc:	cd 2b       	or	r28, r29
    18be:	11 f0       	breq	.+4      	; 0x18c4 <disk_writep+0xcc>
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <disk_writep+0xce>
    18c4:	11 e0       	ldi	r17, 0x01	; 1
// Deselect the card and release SPI bus                                 
//-----------------------------------------------------------------------
static
void release_spi (void)
{
	rcv_spi();
    18c6:	f8 de       	rcall	.-528    	; 0x16b8 <rcv_spi>
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <disk_writep+0xd4>
    18ca:	11 e0       	ldi	r17, 0x01	; 1
			release_spi();
		}
	}

	return res;
}
    18cc:	81 2f       	mov	r24, r17
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	08 95       	ret

000018dc <disk_initialize>:

//--------------------------------------------------------------------------
// Initialize Disk Drive                                                 
//--------------------------------------------------------------------------
DSTATUS disk_initialize (void)
{
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <disk_initialize+0x12>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <disk_initialize+0x14>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	INIT_SPI();
    18f4:	8b e3       	ldi	r24, 0x3B	; 59
    18f6:	88 bb       	out	0x18, r24	; 24
    18f8:	8d e0       	ldi	r24, 0x0D	; 13
    18fa:	87 bb       	out	0x17, r24	; 23

	if ((PINB&_BV(SD_INS))!=0x00) return STA_NOINIT;
    18fc:	b4 99       	sbic	0x16, 4	; 22
    18fe:	7b c0       	rjmp	.+246    	; 0x19f6 <disk_initialize+0x11a>

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
    1900:	c3 99       	sbic	0x18, 3	; 24
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <disk_initialize+0x36>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	73 df       	rcall	.-282    	; 0x17f8 <disk_writep>
    1912:	14 e6       	ldi	r17, 0x64	; 100
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 
    1914:	d1 de       	rcall	.-606    	; 0x16b8 <rcv_spi>
    1916:	11 50       	subi	r17, 0x01	; 1
    1918:	e9 f7       	brne	.-6      	; 0x1914 <disk_initialize+0x38>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			// Enter Idle state 
    191a:	80 e4       	ldi	r24, 0x40	; 64
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	d6 de       	rcall	.-596    	; 0x16d2 <send_cmd>
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	09 f0       	breq	.+2      	; 0x192c <disk_initialize+0x50>
    192a:	5e c0       	rjmp	.+188    	; 0x19e8 <disk_initialize+0x10c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	// SDv2 
    192c:	88 e4       	ldi	r24, 0x48	; 72
    192e:	4a ea       	ldi	r20, 0xAA	; 170
    1930:	51 e0       	ldi	r21, 0x01	; 1
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	cd de       	rcall	.-614    	; 0x16d2 <send_cmd>
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	b1 f5       	brne	.+108    	; 0x19a8 <disk_initialize+0xcc>
    193c:	6e 01       	movw	r12, r28
    193e:	08 94       	sec
    1940:	c1 1c       	adc	r12, r1
    1942:	d1 1c       	adc	r13, r1
    1944:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Get trailing return value of R7 resp 
    1946:	8e 01       	movw	r16, r28
    1948:	0b 5f       	subi	r16, 0xFB	; 251
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	b5 de       	rcall	.-662    	; 0x16b8 <rcv_spi>
    194e:	f7 01       	movw	r30, r14
    1950:	81 93       	st	Z+, r24
    1952:	7f 01       	movw	r14, r30
    1954:	e0 17       	cp	r30, r16
    1956:	f1 07       	cpc	r31, r17
    1958:	c9 f7       	brne	.-14     	; 0x194c <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				// The card can work at vdd range of 2.7-3.6V 
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	09 f0       	breq	.+2      	; 0x1962 <disk_initialize+0x86>
    1960:	43 c0       	rjmp	.+134    	; 0x19e8 <disk_initialize+0x10c>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	8a 3a       	cpi	r24, 0xAA	; 170
    1966:	09 f0       	breq	.+2      	; 0x196a <disk_initialize+0x8e>
    1968:	3f c0       	rjmp	.+126    	; 0x19e8 <disk_initialize+0x10c>
    196a:	00 ee       	ldi	r16, 0xE0	; 224
    196c:	1e e2       	ldi	r17, 0x2E	; 46
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <disk_initialize+0x9a>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	// Wait for leaving idle state (ACMD41 with HCS bit) 
    1970:	01 50       	subi	r16, 0x01	; 1
    1972:	10 40       	sbci	r17, 0x00	; 0
    1974:	c9 f1       	breq	.+114    	; 0x19e8 <disk_initialize+0x10c>
    1976:	89 ee       	ldi	r24, 0xE9	; 233
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e4       	ldi	r23, 0x40	; 64
    1980:	a8 de       	rcall	.-688    	; 0x16d2 <send_cmd>
    1982:	88 23       	and	r24, r24
    1984:	a9 f7       	brne	.-22     	; 0x1970 <disk_initialize+0x94>
    1986:	45 c0       	rjmp	.+138    	; 0x1a12 <disk_initialize+0x136>
				if (tmr && send_cmd(CMD58, 0) == 0) {		// Check CCS bit in the OCR 
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1988:	97 de       	rcall	.-722    	; 0x16b8 <rcv_spi>
    198a:	f6 01       	movw	r30, r12
    198c:	81 93       	st	Z+, r24
    198e:	6f 01       	movw	r12, r30
    1990:	ee 15       	cp	r30, r14
    1992:	ff 05       	cpc	r31, r15
    1994:	c9 f7       	brne	.-14     	; 0x1988 <disk_initialize+0xac>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	// SDv2 (HC or SC) 
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	86 fd       	sbrc	r24, 6
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <disk_initialize+0xc6>
    199c:	04 e0       	ldi	r16, 0x04	; 4
    199e:	f0 2e       	mov	r15, r16
    19a0:	24 c0       	rjmp	.+72     	; 0x19ea <disk_initialize+0x10e>
    19a2:	1c e0       	ldi	r17, 0x0C	; 12
    19a4:	f1 2e       	mov	r15, r17
    19a6:	21 c0       	rjmp	.+66     	; 0x19ea <disk_initialize+0x10e>
				}
			}
		} else {							// SDv1 or MMCv3 
			if (send_cmd(ACMD41, 0) <= 1) 	{
    19a8:	89 ee       	ldi	r24, 0xE9	; 233
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	8f de       	rcall	.-738    	; 0x16d2 <send_cmd>
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	28 f0       	brcs	.+10     	; 0x19c2 <disk_initialize+0xe6>
    19b8:	b1 e4       	ldi	r27, 0x41	; 65
    19ba:	eb 2e       	mov	r14, r27
    19bc:	ff 24       	eor	r15, r15
    19be:	f3 94       	inc	r15
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <disk_initialize+0xee>
    19c2:	a9 ee       	ldi	r26, 0xE9	; 233
    19c4:	ea 2e       	mov	r14, r26
    19c6:	f2 e0       	ldi	r31, 0x02	; 2
    19c8:	ff 2e       	mov	r15, r31
    19ca:	08 ea       	ldi	r16, 0xA8	; 168
    19cc:	11 e6       	ldi	r17, 0x61	; 97
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <disk_initialize+0xfa>
				ty = CT_SD1; cmd = ACMD41;	// SDv1 
			} else {
				ty = CT_MMC; cmd = CMD1;	// MMCv3 
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	// Wait for leaving idle state 
    19d0:	01 50       	subi	r16, 0x01	; 1
    19d2:	10 40       	sbci	r17, 0x00	; 0
    19d4:	49 f0       	breq	.+18     	; 0x19e8 <disk_initialize+0x10c>
    19d6:	8e 2d       	mov	r24, r14
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	78 de       	rcall	.-784    	; 0x16d2 <send_cmd>
    19e2:	88 23       	and	r24, r24
    19e4:	a9 f7       	brne	.-22     	; 0x19d0 <disk_initialize+0xf4>
    19e6:	1f c0       	rjmp	.+62     	; 0x1a26 <disk_initialize+0x14a>
    19e8:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			// Set R/W block length to 512 
				ty = 0;
		}
	}
	CardType = ty;
    19ea:	f0 92 75 00 	sts	0x0075, r15
// Deselect the card and release SPI bus                                 
//-----------------------------------------------------------------------
static
void release_spi (void)
{
	rcv_spi();
    19ee:	64 de       	rcall	.-824    	; 0x16b8 <rcv_spi>
		}
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	ff 20       	and	r15, r15
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <disk_initialize+0x11c>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			// Enter Idle state 
		if (send_cmd(CMD8, 0x1AA) == 1) {	// SDv2 
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Get trailing return value of R7 resp 
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				// The card can work at vdd range of 2.7-3.6V 
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	// Wait for leaving idle state (ACMD41 with HCS bit) 
				if (tmr && send_cmd(CMD58, 0) == 0) {		// Check CCS bit in the OCR 
    1a12:	8a e7       	ldi	r24, 0x7A	; 122
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	5a de       	rcall	.-844    	; 0x16d2 <send_cmd>
    1a1e:	88 23       	and	r24, r24
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <disk_initialize+0x148>
    1a22:	b2 cf       	rjmp	.-156    	; 0x1988 <disk_initialize+0xac>
    1a24:	e1 cf       	rjmp	.-62     	; 0x19e8 <disk_initialize+0x10c>
				ty = CT_SD1; cmd = ACMD41;	// SDv1 
			} else {
				ty = CT_MMC; cmd = CMD1;	// MMCv3 
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	// Wait for leaving idle state 
			if (!tmr || send_cmd(CMD16, 512) != 0)			// Set R/W block length to 512 
    1a26:	80 e5       	ldi	r24, 0x50	; 80
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	52 e0       	ldi	r21, 0x02	; 2
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	50 de       	rcall	.-864    	; 0x16d2 <send_cmd>
    1a32:	88 23       	and	r24, r24
    1a34:	c9 f6       	brne	.-78     	; 0x19e8 <disk_initialize+0x10c>
    1a36:	d9 cf       	rjmp	.-78     	; 0x19ea <disk_initialize+0x10e>

00001a38 <__mulsi3>:
    1a38:	62 9f       	mul	r22, r18
    1a3a:	d0 01       	movw	r26, r0
    1a3c:	73 9f       	mul	r23, r19
    1a3e:	f0 01       	movw	r30, r0
    1a40:	82 9f       	mul	r24, r18
    1a42:	e0 0d       	add	r30, r0
    1a44:	f1 1d       	adc	r31, r1
    1a46:	64 9f       	mul	r22, r20
    1a48:	e0 0d       	add	r30, r0
    1a4a:	f1 1d       	adc	r31, r1
    1a4c:	92 9f       	mul	r25, r18
    1a4e:	f0 0d       	add	r31, r0
    1a50:	83 9f       	mul	r24, r19
    1a52:	f0 0d       	add	r31, r0
    1a54:	74 9f       	mul	r23, r20
    1a56:	f0 0d       	add	r31, r0
    1a58:	65 9f       	mul	r22, r21
    1a5a:	f0 0d       	add	r31, r0
    1a5c:	99 27       	eor	r25, r25
    1a5e:	72 9f       	mul	r23, r18
    1a60:	b0 0d       	add	r27, r0
    1a62:	e1 1d       	adc	r30, r1
    1a64:	f9 1f       	adc	r31, r25
    1a66:	63 9f       	mul	r22, r19
    1a68:	b0 0d       	add	r27, r0
    1a6a:	e1 1d       	adc	r30, r1
    1a6c:	f9 1f       	adc	r31, r25
    1a6e:	bd 01       	movw	r22, r26
    1a70:	cf 01       	movw	r24, r30
    1a72:	11 24       	eor	r1, r1
    1a74:	08 95       	ret

00001a76 <__udivmodsi4>:
    1a76:	a1 e2       	ldi	r26, 0x21	; 33
    1a78:	1a 2e       	mov	r1, r26
    1a7a:	aa 1b       	sub	r26, r26
    1a7c:	bb 1b       	sub	r27, r27
    1a7e:	fd 01       	movw	r30, r26
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <__udivmodsi4_ep>

00001a82 <__udivmodsi4_loop>:
    1a82:	aa 1f       	adc	r26, r26
    1a84:	bb 1f       	adc	r27, r27
    1a86:	ee 1f       	adc	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	a2 17       	cp	r26, r18
    1a8c:	b3 07       	cpc	r27, r19
    1a8e:	e4 07       	cpc	r30, r20
    1a90:	f5 07       	cpc	r31, r21
    1a92:	20 f0       	brcs	.+8      	; 0x1a9c <__udivmodsi4_ep>
    1a94:	a2 1b       	sub	r26, r18
    1a96:	b3 0b       	sbc	r27, r19
    1a98:	e4 0b       	sbc	r30, r20
    1a9a:	f5 0b       	sbc	r31, r21

00001a9c <__udivmodsi4_ep>:
    1a9c:	66 1f       	adc	r22, r22
    1a9e:	77 1f       	adc	r23, r23
    1aa0:	88 1f       	adc	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	1a 94       	dec	r1
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <__udivmodsi4_loop>
    1aa8:	60 95       	com	r22
    1aaa:	70 95       	com	r23
    1aac:	80 95       	com	r24
    1aae:	90 95       	com	r25
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	bd 01       	movw	r22, r26
    1ab6:	cf 01       	movw	r24, r30
    1ab8:	08 95       	ret

00001aba <strcpy>:
    1aba:	fb 01       	movw	r30, r22
    1abc:	dc 01       	movw	r26, r24
    1abe:	01 90       	ld	r0, Z+
    1ac0:	0d 92       	st	X+, r0
    1ac2:	00 20       	and	r0, r0
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <strcpy+0x4>
    1ac6:	08 95       	ret

00001ac8 <__eerd_byte_m8>:
    1ac8:	e1 99       	sbic	0x1c, 1	; 28
    1aca:	fe cf       	rjmp	.-4      	; 0x1ac8 <__eerd_byte_m8>
    1acc:	9f bb       	out	0x1f, r25	; 31
    1ace:	8e bb       	out	0x1e, r24	; 30
    1ad0:	e0 9a       	sbi	0x1c, 0	; 28
    1ad2:	99 27       	eor	r25, r25
    1ad4:	8d b3       	in	r24, 0x1d	; 29
    1ad6:	08 95       	ret

00001ad8 <_exit>:
    1ad8:	f8 94       	cli

00001ada <__stop_program>:
    1ada:	ff cf       	rjmp	.-2      	; 0x1ada <__stop_program>
